// Copyright (c) 2012 Leonhard Gruenschloss (leonhard@gruenschloss.org)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This file is automatically generated.

#ifndef HALTON_SAMPLER_H
#define HALTON_SAMPLER_H

#include <algorithm>
#include <vector>
#include "lowdiscrepency.h"
/*
inline unsigned int reverse_bit32(unsigned int n) {
	n = (n << 16) | (n >> 16);
	n = ((n & 0x00ff00ff) << 8) | ((n & 0xff00ff00) >> 8);
	n = ((n & 0x0f0f0f0f) << 4) | ((n & 0xf0f0f0f0) >> 4);
	n = ((n & 0x33333333) << 2) | ((n & 0xcccccccc) >> 2);
	n = ((n & 0x55555555) << 1) | ((n & 0xaaaaaaaa) >> 1);
	return n;
}*/

// Compute points of the Halton sequence with with digit-permutations for different bases.
class Halton_sampler
{
public:
    // Init the permutation arrays using Faure-permutations. Alternatively, init_random can be
    // called before the sampling functionality can be used.
    void init_faure();

    // Init the permutation arrays using randomized permutations. Alternatively, init_faure can be
    // called before the sampling functionality can be used. The client needs to specify a random
    // number generator function object that can be used to generate a random sequence of integers.
    // That is: if f is a random number generator and N is a positive integer, then f(N) will
    // return an integer less than N and greater than or equal to 0.
    template <typename Random_number_generator>
    void init_random(Random_number_generator& rand);

    // Return the number of supported dimensions.
    static unsigned get_num_dimensions() { return 256u; }

    // Return the Halton sample for the given dimension (component) and index.
    // The client must have called init_random or init_faure at least once before.
    // dimension must be smaller than the value returned by get_num_dimensions().
    float sample(unsigned dimension, unsigned long long index) const;

private:
    static unsigned short invert(unsigned short base, unsigned short digits,
        unsigned short index, const std::vector<unsigned short>& perm);

    void init_tables(const std::vector<std::vector<unsigned short> >& perms);

    float halton2(unsigned long long index) const;
    float halton3(unsigned long long index) const;
    float halton5(unsigned long long index) const;
    float halton7(unsigned long long index) const;
    float halton11(unsigned long long index) const;
    float halton13(unsigned long long index) const;
    float halton17(unsigned long long index) const;
    float halton19(unsigned long long index) const;
    float halton23(unsigned long long index) const;
    float halton29(unsigned long long index) const;
    float halton31(unsigned long long index) const;
    float halton37(unsigned long long index) const;
    float halton41(unsigned long long index) const;
    float halton43(unsigned long long index) const;
    float halton47(unsigned long long index) const;
    float halton53(unsigned long long index) const;
    float halton59(unsigned long long index) const;
    float halton61(unsigned long long index) const;
    float halton67(unsigned long long index) const;
    float halton71(unsigned long long index) const;
    float halton73(unsigned long long index) const;
    float halton79(unsigned long long index) const;
    float halton83(unsigned long long index) const;
    float halton89(unsigned long long index) const;
    float halton97(unsigned long long index) const;
    float halton101(unsigned long long index) const;
    float halton103(unsigned long long index) const;
    float halton107(unsigned long long index) const;
    float halton109(unsigned long long index) const;
    float halton113(unsigned long long index) const;
    float halton127(unsigned long long index) const;
    float halton131(unsigned long long index) const;
    float halton137(unsigned long long index) const;
    float halton139(unsigned long long index) const;
    float halton149(unsigned long long index) const;
    float halton151(unsigned long long index) const;
    float halton157(unsigned long long index) const;
    float halton163(unsigned long long index) const;
    float halton167(unsigned long long index) const;
    float halton173(unsigned long long index) const;
    float halton179(unsigned long long index) const;
    float halton181(unsigned long long index) const;
    float halton191(unsigned long long index) const;
    float halton193(unsigned long long index) const;
    float halton197(unsigned long long index) const;
    float halton199(unsigned long long index) const;
    float halton211(unsigned long long index) const;
    float halton223(unsigned long long index) const;
    float halton227(unsigned long long index) const;
    float halton229(unsigned long long index) const;
    float halton233(unsigned long long index) const;
    float halton239(unsigned long long index) const;
    float halton241(unsigned long long index) const;
    float halton251(unsigned long long index) const;
    float halton257(unsigned long long index) const;
    float halton263(unsigned long long index) const;
    float halton269(unsigned long long index) const;
    float halton271(unsigned long long index) const;
    float halton277(unsigned long long index) const;
    float halton281(unsigned long long index) const;
    float halton283(unsigned long long index) const;
    float halton293(unsigned long long index) const;
    float halton307(unsigned long long index) const;
    float halton311(unsigned long long index) const;
    float halton313(unsigned long long index) const;
    float halton317(unsigned long long index) const;
    float halton331(unsigned long long index) const;
    float halton337(unsigned long long index) const;
    float halton347(unsigned long long index) const;
    float halton349(unsigned long long index) const;
    float halton353(unsigned long long index) const;
    float halton359(unsigned long long index) const;
    float halton367(unsigned long long index) const;
    float halton373(unsigned long long index) const;
    float halton379(unsigned long long index) const;
    float halton383(unsigned long long index) const;
    float halton389(unsigned long long index) const;
    float halton397(unsigned long long index) const;
    float halton401(unsigned long long index) const;
    float halton409(unsigned long long index) const;
    float halton419(unsigned long long index) const;
    float halton421(unsigned long long index) const;
    float halton431(unsigned long long index) const;
    float halton433(unsigned long long index) const;
    float halton439(unsigned long long index) const;
    float halton443(unsigned long long index) const;
    float halton449(unsigned long long index) const;
    float halton457(unsigned long long index) const;
    float halton461(unsigned long long index) const;
    float halton463(unsigned long long index) const;
    float halton467(unsigned long long index) const;
    float halton479(unsigned long long index) const;
    float halton487(unsigned long long index) const;
    float halton491(unsigned long long index) const;
    float halton499(unsigned long long index) const;
    float halton503(unsigned long long index) const;
    float halton509(unsigned long long index) const;
    float halton521(unsigned long long index) const;
    float halton523(unsigned long long index) const;
    float halton541(unsigned long long index) const;
    float halton547(unsigned long long index) const;
    float halton557(unsigned long long index) const;
    float halton563(unsigned long long index) const;
    float halton569(unsigned long long index) const;
    float halton571(unsigned long long index) const;
    float halton577(unsigned long long index) const;
    float halton587(unsigned long long index) const;
    float halton593(unsigned long long index) const;
    float halton599(unsigned long long index) const;
    float halton601(unsigned long long index) const;
    float halton607(unsigned long long index) const;
    float halton613(unsigned long long index) const;
    float halton617(unsigned long long index) const;
    float halton619(unsigned long long index) const;
    float halton631(unsigned long long index) const;
    float halton641(unsigned long long index) const;
    float halton643(unsigned long long index) const;
    float halton647(unsigned long long index) const;
    float halton653(unsigned long long index) const;
    float halton659(unsigned long long index) const;
    float halton661(unsigned long long index) const;
    float halton673(unsigned long long index) const;
    float halton677(unsigned long long index) const;
    float halton683(unsigned long long index) const;
    float halton691(unsigned long long index) const;
    float halton701(unsigned long long index) const;
    float halton709(unsigned long long index) const;
    float halton719(unsigned long long index) const;
    float halton727(unsigned long long index) const;
    float halton733(unsigned long long index) const;
    float halton739(unsigned long long index) const;
    float halton743(unsigned long long index) const;
    float halton751(unsigned long long index) const;
    float halton757(unsigned long long index) const;
    float halton761(unsigned long long index) const;
    float halton769(unsigned long long index) const;
    float halton773(unsigned long long index) const;
    float halton787(unsigned long long index) const;
    float halton797(unsigned long long index) const;
    float halton809(unsigned long long index) const;
    float halton811(unsigned long long index) const;
    float halton821(unsigned long long index) const;
    float halton823(unsigned long long index) const;
    float halton827(unsigned long long index) const;
    float halton829(unsigned long long index) const;
    float halton839(unsigned long long index) const;
    float halton853(unsigned long long index) const;
    float halton857(unsigned long long index) const;
    float halton859(unsigned long long index) const;
    float halton863(unsigned long long index) const;
    float halton877(unsigned long long index) const;
    float halton881(unsigned long long index) const;
    float halton883(unsigned long long index) const;
    float halton887(unsigned long long index) const;
    float halton907(unsigned long long index) const;
    float halton911(unsigned long long index) const;
    float halton919(unsigned long long index) const;
    float halton929(unsigned long long index) const;
    float halton937(unsigned long long index) const;
    float halton941(unsigned long long index) const;
    float halton947(unsigned long long index) const;
    float halton953(unsigned long long index) const;
    float halton967(unsigned long long index) const;
    float halton971(unsigned long long index) const;
    float halton977(unsigned long long index) const;
    float halton983(unsigned long long index) const;
    float halton991(unsigned long long index) const;
    float halton997(unsigned long long index) const;
    float halton1009(unsigned long long index) const;
    float halton1013(unsigned long long index) const;
    float halton1019(unsigned long long index) const;
    float halton1021(unsigned long long index) const;
    float halton1031(unsigned long long index) const;
    float halton1033(unsigned long long index) const;
    float halton1039(unsigned long long index) const;
    float halton1049(unsigned long long index) const;
    float halton1051(unsigned long long index) const;
    float halton1061(unsigned long long index) const;
    float halton1063(unsigned long long index) const;
    float halton1069(unsigned long long index) const;
    float halton1087(unsigned long long index) const;
    float halton1091(unsigned long long index) const;
    float halton1093(unsigned long long index) const;
    float halton1097(unsigned long long index) const;
    float halton1103(unsigned long long index) const;
    float halton1109(unsigned long long index) const;
    float halton1117(unsigned long long index) const;
    float halton1123(unsigned long long index) const;
    float halton1129(unsigned long long index) const;
    float halton1151(unsigned long long index) const;
    float halton1153(unsigned long long index) const;
    float halton1163(unsigned long long index) const;
    float halton1171(unsigned long long index) const;
    float halton1181(unsigned long long index) const;
    float halton1187(unsigned long long index) const;
    float halton1193(unsigned long long index) const;
    float halton1201(unsigned long long index) const;
    float halton1213(unsigned long long index) const;
    float halton1217(unsigned long long index) const;
    float halton1223(unsigned long long index) const;
    float halton1229(unsigned long long index) const;
    float halton1231(unsigned long long index) const;
    float halton1237(unsigned long long index) const;
    float halton1249(unsigned long long index) const;
    float halton1259(unsigned long long index) const;
    float halton1277(unsigned long long index) const;
    float halton1279(unsigned long long index) const;
    float halton1283(unsigned long long index) const;
    float halton1289(unsigned long long index) const;
    float halton1291(unsigned long long index) const;
    float halton1297(unsigned long long index) const;
    float halton1301(unsigned long long index) const;
    float halton1303(unsigned long long index) const;
    float halton1307(unsigned long long index) const;
    float halton1319(unsigned long long index) const;
    float halton1321(unsigned long long index) const;
    float halton1327(unsigned long long index) const;
    float halton1361(unsigned long long index) const;
    float halton1367(unsigned long long index) const;
    float halton1373(unsigned long long index) const;
    float halton1381(unsigned long long index) const;
    float halton1399(unsigned long long index) const;
    float halton1409(unsigned long long index) const;
    float halton1423(unsigned long long index) const;
    float halton1427(unsigned long long index) const;
    float halton1429(unsigned long long index) const;
    float halton1433(unsigned long long index) const;
    float halton1439(unsigned long long index) const;
    float halton1447(unsigned long long index) const;
    float halton1451(unsigned long long index) const;
    float halton1453(unsigned long long index) const;
    float halton1459(unsigned long long index) const;
    float halton1471(unsigned long long index) const;
    float halton1481(unsigned long long index) const;
    float halton1483(unsigned long long index) const;
    float halton1487(unsigned long long index) const;
    float halton1489(unsigned long long index) const;
    float halton1493(unsigned long long index) const;
    float halton1499(unsigned long long index) const;
    float halton1511(unsigned long long index) const;
    float halton1523(unsigned long long index) const;
    float halton1531(unsigned long long index) const;
    float halton1543(unsigned long long index) const;
    float halton1549(unsigned long long index) const;
    float halton1553(unsigned long long index) const;
    float halton1559(unsigned long long index) const;
    float halton1567(unsigned long long index) const;
    float halton1571(unsigned long long index) const;
    float halton1579(unsigned long long index) const;
    float halton1583(unsigned long long index) const;
    float halton1597(unsigned long long index) const;
    float halton1601(unsigned long long index) const;
    float halton1607(unsigned long long index) const;
    float halton1609(unsigned long long index) const;
    float halton1613(unsigned long long index) const;
    float halton1619(unsigned long long index) const;

    unsigned short m_perm3[243];
    unsigned short m_perm5[125];
    unsigned short m_perm7[343];
    unsigned short m_perm11[121];
    unsigned short m_perm13[169];
    unsigned short m_perm17[289];
    unsigned short m_perm19[361];
    unsigned short m_perm23[23];
    unsigned short m_perm29[29];
    unsigned short m_perm31[31];
    unsigned short m_perm37[37];
    unsigned short m_perm41[41];
    unsigned short m_perm43[43];
    unsigned short m_perm47[47];
    unsigned short m_perm53[53];
    unsigned short m_perm59[59];
    unsigned short m_perm61[61];
    unsigned short m_perm67[67];
    unsigned short m_perm71[71];
    unsigned short m_perm73[73];
    unsigned short m_perm79[79];
    unsigned short m_perm83[83];
    unsigned short m_perm89[89];
    unsigned short m_perm97[97];
    unsigned short m_perm101[101];
    unsigned short m_perm103[103];
    unsigned short m_perm107[107];
    unsigned short m_perm109[109];
    unsigned short m_perm113[113];
    unsigned short m_perm127[127];
    unsigned short m_perm131[131];
    unsigned short m_perm137[137];
    unsigned short m_perm139[139];
    unsigned short m_perm149[149];
    unsigned short m_perm151[151];
    unsigned short m_perm157[157];
    unsigned short m_perm163[163];
    unsigned short m_perm167[167];
    unsigned short m_perm173[173];
    unsigned short m_perm179[179];
    unsigned short m_perm181[181];
    unsigned short m_perm191[191];
    unsigned short m_perm193[193];
    unsigned short m_perm197[197];
    unsigned short m_perm199[199];
    unsigned short m_perm211[211];
    unsigned short m_perm223[223];
    unsigned short m_perm227[227];
    unsigned short m_perm229[229];
    unsigned short m_perm233[233];
    unsigned short m_perm239[239];
    unsigned short m_perm241[241];
    unsigned short m_perm251[251];
    unsigned short m_perm257[257];
    unsigned short m_perm263[263];
    unsigned short m_perm269[269];
    unsigned short m_perm271[271];
    unsigned short m_perm277[277];
    unsigned short m_perm281[281];
    unsigned short m_perm283[283];
    unsigned short m_perm293[293];
    unsigned short m_perm307[307];
    unsigned short m_perm311[311];
    unsigned short m_perm313[313];
    unsigned short m_perm317[317];
    unsigned short m_perm331[331];
    unsigned short m_perm337[337];
    unsigned short m_perm347[347];
    unsigned short m_perm349[349];
    unsigned short m_perm353[353];
    unsigned short m_perm359[359];
    unsigned short m_perm367[367];
    unsigned short m_perm373[373];
    unsigned short m_perm379[379];
    unsigned short m_perm383[383];
    unsigned short m_perm389[389];
    unsigned short m_perm397[397];
    unsigned short m_perm401[401];
    unsigned short m_perm409[409];
    unsigned short m_perm419[419];
    unsigned short m_perm421[421];
    unsigned short m_perm431[431];
    unsigned short m_perm433[433];
    unsigned short m_perm439[439];
    unsigned short m_perm443[443];
    unsigned short m_perm449[449];
    unsigned short m_perm457[457];
    unsigned short m_perm461[461];
    unsigned short m_perm463[463];
    unsigned short m_perm467[467];
    unsigned short m_perm479[479];
    unsigned short m_perm487[487];
    unsigned short m_perm491[491];
    unsigned short m_perm499[499];
    unsigned short m_perm503[503];
    unsigned short m_perm509[509];
    unsigned short m_perm521[521];
    unsigned short m_perm523[523];
    unsigned short m_perm541[541];
    unsigned short m_perm547[547];
    unsigned short m_perm557[557];
    unsigned short m_perm563[563];
    unsigned short m_perm569[569];
    unsigned short m_perm571[571];
    unsigned short m_perm577[577];
    unsigned short m_perm587[587];
    unsigned short m_perm593[593];
    unsigned short m_perm599[599];
    unsigned short m_perm601[601];
    unsigned short m_perm607[607];
    unsigned short m_perm613[613];
    unsigned short m_perm617[617];
    unsigned short m_perm619[619];
    unsigned short m_perm631[631];
    unsigned short m_perm641[641];
    unsigned short m_perm643[643];
    unsigned short m_perm647[647];
    unsigned short m_perm653[653];
    unsigned short m_perm659[659];
    unsigned short m_perm661[661];
    unsigned short m_perm673[673];
    unsigned short m_perm677[677];
    unsigned short m_perm683[683];
    unsigned short m_perm691[691];
    unsigned short m_perm701[701];
    unsigned short m_perm709[709];
    unsigned short m_perm719[719];
    unsigned short m_perm727[727];
    unsigned short m_perm733[733];
    unsigned short m_perm739[739];
    unsigned short m_perm743[743];
    unsigned short m_perm751[751];
    unsigned short m_perm757[757];
    unsigned short m_perm761[761];
    unsigned short m_perm769[769];
    unsigned short m_perm773[773];
    unsigned short m_perm787[787];
    unsigned short m_perm797[797];
    unsigned short m_perm809[809];
    unsigned short m_perm811[811];
    unsigned short m_perm821[821];
    unsigned short m_perm823[823];
    unsigned short m_perm827[827];
    unsigned short m_perm829[829];
    unsigned short m_perm839[839];
    unsigned short m_perm853[853];
    unsigned short m_perm857[857];
    unsigned short m_perm859[859];
    unsigned short m_perm863[863];
    unsigned short m_perm877[877];
    unsigned short m_perm881[881];
    unsigned short m_perm883[883];
    unsigned short m_perm887[887];
    unsigned short m_perm907[907];
    unsigned short m_perm911[911];
    unsigned short m_perm919[919];
    unsigned short m_perm929[929];
    unsigned short m_perm937[937];
    unsigned short m_perm941[941];
    unsigned short m_perm947[947];
    unsigned short m_perm953[953];
    unsigned short m_perm967[967];
    unsigned short m_perm971[971];
    unsigned short m_perm977[977];
    unsigned short m_perm983[983];
    unsigned short m_perm991[991];
    unsigned short m_perm997[997];
    unsigned short m_perm1009[1009];
    unsigned short m_perm1013[1013];
    unsigned short m_perm1019[1019];
    unsigned short m_perm1021[1021];
    unsigned short m_perm1031[1031];
    unsigned short m_perm1033[1033];
    unsigned short m_perm1039[1039];
    unsigned short m_perm1049[1049];
    unsigned short m_perm1051[1051];
    unsigned short m_perm1061[1061];
    unsigned short m_perm1063[1063];
    unsigned short m_perm1069[1069];
    unsigned short m_perm1087[1087];
    unsigned short m_perm1091[1091];
    unsigned short m_perm1093[1093];
    unsigned short m_perm1097[1097];
    unsigned short m_perm1103[1103];
    unsigned short m_perm1109[1109];
    unsigned short m_perm1117[1117];
    unsigned short m_perm1123[1123];
    unsigned short m_perm1129[1129];
    unsigned short m_perm1151[1151];
    unsigned short m_perm1153[1153];
    unsigned short m_perm1163[1163];
    unsigned short m_perm1171[1171];
    unsigned short m_perm1181[1181];
    unsigned short m_perm1187[1187];
    unsigned short m_perm1193[1193];
    unsigned short m_perm1201[1201];
    unsigned short m_perm1213[1213];
    unsigned short m_perm1217[1217];
    unsigned short m_perm1223[1223];
    unsigned short m_perm1229[1229];
    unsigned short m_perm1231[1231];
    unsigned short m_perm1237[1237];
    unsigned short m_perm1249[1249];
    unsigned short m_perm1259[1259];
    unsigned short m_perm1277[1277];
    unsigned short m_perm1279[1279];
    unsigned short m_perm1283[1283];
    unsigned short m_perm1289[1289];
    unsigned short m_perm1291[1291];
    unsigned short m_perm1297[1297];
    unsigned short m_perm1301[1301];
    unsigned short m_perm1303[1303];
    unsigned short m_perm1307[1307];
    unsigned short m_perm1319[1319];
    unsigned short m_perm1321[1321];
    unsigned short m_perm1327[1327];
    unsigned short m_perm1361[1361];
    unsigned short m_perm1367[1367];
    unsigned short m_perm1373[1373];
    unsigned short m_perm1381[1381];
    unsigned short m_perm1399[1399];
    unsigned short m_perm1409[1409];
    unsigned short m_perm1423[1423];
    unsigned short m_perm1427[1427];
    unsigned short m_perm1429[1429];
    unsigned short m_perm1433[1433];
    unsigned short m_perm1439[1439];
    unsigned short m_perm1447[1447];
    unsigned short m_perm1451[1451];
    unsigned short m_perm1453[1453];
    unsigned short m_perm1459[1459];
    unsigned short m_perm1471[1471];
    unsigned short m_perm1481[1481];
    unsigned short m_perm1483[1483];
    unsigned short m_perm1487[1487];
    unsigned short m_perm1489[1489];
    unsigned short m_perm1493[1493];
    unsigned short m_perm1499[1499];
    unsigned short m_perm1511[1511];
    unsigned short m_perm1523[1523];
    unsigned short m_perm1531[1531];
    unsigned short m_perm1543[1543];
    unsigned short m_perm1549[1549];
    unsigned short m_perm1553[1553];
    unsigned short m_perm1559[1559];
    unsigned short m_perm1567[1567];
    unsigned short m_perm1571[1571];
    unsigned short m_perm1579[1579];
    unsigned short m_perm1583[1583];
    unsigned short m_perm1597[1597];
    unsigned short m_perm1601[1601];
    unsigned short m_perm1607[1607];
    unsigned short m_perm1609[1609];
    unsigned short m_perm1613[1613];
    unsigned short m_perm1619[1619];
};

inline void Halton_sampler::init_faure()
{
    const unsigned max_base = 1619u;
    std::vector<std::vector<unsigned short> > perms(max_base + 1);
    for (unsigned k = 1; k <= 3; ++k) // Keep identity permutations for base 1, 2, 3.
    {
        perms[k].resize(k);
        for (unsigned i = 0; i < k; ++i)
            perms[k][i] = i;
    }
    for (unsigned base = 4; base <= max_base; ++base)
    {
        perms[base].resize(base);
        const unsigned b = base / 2;
        if (base & 1) // odd
        {
            for (unsigned i = 0; i < base - 1; ++i)
                perms[base][i + (i >= b)] = perms[base - 1][i] + (perms[base - 1][i] >= b);
            perms[base][b] = b;
        }
        else // even
        {
            for (unsigned i = 0; i < b; ++i)
            {
                perms[base][i] = 2 * perms[b][i];
                perms[base][b + i] = 2 * perms[b][i] + 1;
            }
        }
    }
    init_tables(perms);
}

template <typename Random_number_generator>
void Halton_sampler::init_random(Random_number_generator& rand)
{
    const unsigned max_base = 1619u;
    std::vector<std::vector<unsigned short> > perms(max_base + 1);
    for (unsigned k = 1; k <= 3; ++k) // Keep identity permutations for base 1, 2, 3.
    {
        perms[k].resize(k);
        for (unsigned i = 0; i < k; ++i)
            perms[k][i] = i;
    }
    for (unsigned base = 4; base <= max_base; ++base)
    {
        perms[base].resize(base);
        for (unsigned i = 0; i < base; ++i)
            perms[base][i] = i;
        std::random_shuffle(perms[base].begin(), perms[base].end(), rand);
    }
    init_tables(perms);
}

inline float Halton_sampler::sample(const unsigned dimension, const unsigned long long index) const
{
    switch (dimension)
    {
        case 0: return halton2(index);
        case 1: return halton3(index);
        case 2: return halton5(index);
        case 3: return halton7(index);
        case 4: return halton11(index);
        case 5: return halton13(index);
        case 6: return halton17(index);
        case 7: return halton19(index);
        case 8: return halton23(index);
        case 9: return halton29(index);
        case 10: return halton31(index);
        case 11: return halton37(index);
        case 12: return halton41(index);
        case 13: return halton43(index);
        case 14: return halton47(index);
        case 15: return halton53(index);
        case 16: return halton59(index);
        case 17: return halton61(index);
        case 18: return halton67(index);
        case 19: return halton71(index);
        case 20: return halton73(index);
        case 21: return halton79(index);
        case 22: return halton83(index);
        case 23: return halton89(index);
        case 24: return halton97(index);
        case 25: return halton101(index);
        case 26: return halton103(index);
        case 27: return halton107(index);
        case 28: return halton109(index);
        case 29: return halton113(index);
        case 30: return halton127(index);
        case 31: return halton131(index);
        case 32: return halton137(index);
        case 33: return halton139(index);
        case 34: return halton149(index);
        case 35: return halton151(index);
        case 36: return halton157(index);
        case 37: return halton163(index);
        case 38: return halton167(index);
        case 39: return halton173(index);
        case 40: return halton179(index);
        case 41: return halton181(index);
        case 42: return halton191(index);
        case 43: return halton193(index);
        case 44: return halton197(index);
        case 45: return halton199(index);
        case 46: return halton211(index);
        case 47: return halton223(index);
        case 48: return halton227(index);
        case 49: return halton229(index);
        case 50: return halton233(index);
        case 51: return halton239(index);
        case 52: return halton241(index);
        case 53: return halton251(index);
        case 54: return halton257(index);
        case 55: return halton263(index);
        case 56: return halton269(index);
        case 57: return halton271(index);
        case 58: return halton277(index);
        case 59: return halton281(index);
        case 60: return halton283(index);
        case 61: return halton293(index);
        case 62: return halton307(index);
        case 63: return halton311(index);
        case 64: return halton313(index);
        case 65: return halton317(index);
        case 66: return halton331(index);
        case 67: return halton337(index);
        case 68: return halton347(index);
        case 69: return halton349(index);
        case 70: return halton353(index);
        case 71: return halton359(index);
        case 72: return halton367(index);
        case 73: return halton373(index);
        case 74: return halton379(index);
        case 75: return halton383(index);
        case 76: return halton389(index);
        case 77: return halton397(index);
        case 78: return halton401(index);
        case 79: return halton409(index);
        case 80: return halton419(index);
        case 81: return halton421(index);
        case 82: return halton431(index);
        case 83: return halton433(index);
        case 84: return halton439(index);
        case 85: return halton443(index);
        case 86: return halton449(index);
        case 87: return halton457(index);
        case 88: return halton461(index);
        case 89: return halton463(index);
        case 90: return halton467(index);
        case 91: return halton479(index);
        case 92: return halton487(index);
        case 93: return halton491(index);
        case 94: return halton499(index);
        case 95: return halton503(index);
        case 96: return halton509(index);
        case 97: return halton521(index);
        case 98: return halton523(index);
        case 99: return halton541(index);
        case 100: return halton547(index);
        case 101: return halton557(index);
        case 102: return halton563(index);
        case 103: return halton569(index);
        case 104: return halton571(index);
        case 105: return halton577(index);
        case 106: return halton587(index);
        case 107: return halton593(index);
        case 108: return halton599(index);
        case 109: return halton601(index);
        case 110: return halton607(index);
        case 111: return halton613(index);
        case 112: return halton617(index);
        case 113: return halton619(index);
        case 114: return halton631(index);
        case 115: return halton641(index);
        case 116: return halton643(index);
        case 117: return halton647(index);
        case 118: return halton653(index);
        case 119: return halton659(index);
        case 120: return halton661(index);
        case 121: return halton673(index);
        case 122: return halton677(index);
        case 123: return halton683(index);
        case 124: return halton691(index);
        case 125: return halton701(index);
        case 126: return halton709(index);
        case 127: return halton719(index);
        case 128: return halton727(index);
        case 129: return halton733(index);
        case 130: return halton739(index);
        case 131: return halton743(index);
        case 132: return halton751(index);
        case 133: return halton757(index);
        case 134: return halton761(index);
        case 135: return halton769(index);
        case 136: return halton773(index);
        case 137: return halton787(index);
        case 138: return halton797(index);
        case 139: return halton809(index);
        case 140: return halton811(index);
        case 141: return halton821(index);
        case 142: return halton823(index);
        case 143: return halton827(index);
        case 144: return halton829(index);
        case 145: return halton839(index);
        case 146: return halton853(index);
        case 147: return halton857(index);
        case 148: return halton859(index);
        case 149: return halton863(index);
        case 150: return halton877(index);
        case 151: return halton881(index);
        case 152: return halton883(index);
        case 153: return halton887(index);
        case 154: return halton907(index);
        case 155: return halton911(index);
        case 156: return halton919(index);
        case 157: return halton929(index);
        case 158: return halton937(index);
        case 159: return halton941(index);
        case 160: return halton947(index);
        case 161: return halton953(index);
        case 162: return halton967(index);
        case 163: return halton971(index);
        case 164: return halton977(index);
        case 165: return halton983(index);
        case 166: return halton991(index);
        case 167: return halton997(index);
        case 168: return halton1009(index);
        case 169: return halton1013(index);
        case 170: return halton1019(index);
        case 171: return halton1021(index);
        case 172: return halton1031(index);
        case 173: return halton1033(index);
        case 174: return halton1039(index);
        case 175: return halton1049(index);
        case 176: return halton1051(index);
        case 177: return halton1061(index);
        case 178: return halton1063(index);
        case 179: return halton1069(index);
        case 180: return halton1087(index);
        case 181: return halton1091(index);
        case 182: return halton1093(index);
        case 183: return halton1097(index);
        case 184: return halton1103(index);
        case 185: return halton1109(index);
        case 186: return halton1117(index);
        case 187: return halton1123(index);
        case 188: return halton1129(index);
        case 189: return halton1151(index);
        case 190: return halton1153(index);
        case 191: return halton1163(index);
        case 192: return halton1171(index);
        case 193: return halton1181(index);
        case 194: return halton1187(index);
        case 195: return halton1193(index);
        case 196: return halton1201(index);
        case 197: return halton1213(index);
        case 198: return halton1217(index);
        case 199: return halton1223(index);
        case 200: return halton1229(index);
        case 201: return halton1231(index);
        case 202: return halton1237(index);
        case 203: return halton1249(index);
        case 204: return halton1259(index);
        case 205: return halton1277(index);
        case 206: return halton1279(index);
        case 207: return halton1283(index);
        case 208: return halton1289(index);
        case 209: return halton1291(index);
        case 210: return halton1297(index);
        case 211: return halton1301(index);
        case 212: return halton1303(index);
        case 213: return halton1307(index);
        case 214: return halton1319(index);
        case 215: return halton1321(index);
        case 216: return halton1327(index);
        case 217: return halton1361(index);
        case 218: return halton1367(index);
        case 219: return halton1373(index);
        case 220: return halton1381(index);
        case 221: return halton1399(index);
        case 222: return halton1409(index);
        case 223: return halton1423(index);
        case 224: return halton1427(index);
        case 225: return halton1429(index);
        case 226: return halton1433(index);
        case 227: return halton1439(index);
        case 228: return halton1447(index);
        case 229: return halton1451(index);
        case 230: return halton1453(index);
        case 231: return halton1459(index);
        case 232: return halton1471(index);
        case 233: return halton1481(index);
        case 234: return halton1483(index);
        case 235: return halton1487(index);
        case 236: return halton1489(index);
        case 237: return halton1493(index);
        case 238: return halton1499(index);
        case 239: return halton1511(index);
        case 240: return halton1523(index);
        case 241: return halton1531(index);
        case 242: return halton1543(index);
        case 243: return halton1549(index);
        case 244: return halton1553(index);
        case 245: return halton1559(index);
        case 246: return halton1567(index);
        case 247: return halton1571(index);
        case 248: return halton1579(index);
        case 249: return halton1583(index);
        case 250: return halton1597(index);
        case 251: return halton1601(index);
        case 252: return halton1607(index);
        case 253: return halton1609(index);
        case 254: return halton1613(index);
        case 255: return halton1619(index);
    }
    return 0.f;
}

inline unsigned short Halton_sampler::invert(const unsigned short base, const unsigned short digits,
    unsigned short index, const std::vector<unsigned short>& perm)
{
    unsigned short result = 0;
    for (unsigned short i = 0; i < digits; ++i)
    {
        result = result * base + perm[index % base];
        index /= base;
    }
    return result;
}

inline void Halton_sampler::init_tables(const std::vector<std::vector<unsigned short> >& perms)
{
    for (unsigned short i = 0; i < 243; ++i)
        m_perm3[i] = invert(3, 5, i, perms[3]);
    for (unsigned short i = 0; i < 125; ++i)
        m_perm5[i] = invert(5, 3, i, perms[5]);
    for (unsigned short i = 0; i < 343; ++i)
        m_perm7[i] = invert(7, 3, i, perms[7]);
    for (unsigned short i = 0; i < 121; ++i)
        m_perm11[i] = invert(11, 2, i, perms[11]);
    for (unsigned short i = 0; i < 169; ++i)
        m_perm13[i] = invert(13, 2, i, perms[13]);
    for (unsigned short i = 0; i < 289; ++i)
        m_perm17[i] = invert(17, 2, i, perms[17]);
    for (unsigned short i = 0; i < 361; ++i)
        m_perm19[i] = invert(19, 2, i, perms[19]);
    for (unsigned short i = 0; i < 23; ++i)
        m_perm23[i] = invert(23, 1, i, perms[23]);
    for (unsigned short i = 0; i < 29; ++i)
        m_perm29[i] = invert(29, 1, i, perms[29]);
    for (unsigned short i = 0; i < 31; ++i)
        m_perm31[i] = invert(31, 1, i, perms[31]);
    for (unsigned short i = 0; i < 37; ++i)
        m_perm37[i] = invert(37, 1, i, perms[37]);
    for (unsigned short i = 0; i < 41; ++i)
        m_perm41[i] = invert(41, 1, i, perms[41]);
    for (unsigned short i = 0; i < 43; ++i)
        m_perm43[i] = invert(43, 1, i, perms[43]);
    for (unsigned short i = 0; i < 47; ++i)
        m_perm47[i] = invert(47, 1, i, perms[47]);
    for (unsigned short i = 0; i < 53; ++i)
        m_perm53[i] = invert(53, 1, i, perms[53]);
    for (unsigned short i = 0; i < 59; ++i)
        m_perm59[i] = invert(59, 1, i, perms[59]);
    for (unsigned short i = 0; i < 61; ++i)
        m_perm61[i] = invert(61, 1, i, perms[61]);
    for (unsigned short i = 0; i < 67; ++i)
        m_perm67[i] = invert(67, 1, i, perms[67]);
    for (unsigned short i = 0; i < 71; ++i)
        m_perm71[i] = invert(71, 1, i, perms[71]);
    for (unsigned short i = 0; i < 73; ++i)
        m_perm73[i] = invert(73, 1, i, perms[73]);
    for (unsigned short i = 0; i < 79; ++i)
        m_perm79[i] = invert(79, 1, i, perms[79]);
    for (unsigned short i = 0; i < 83; ++i)
        m_perm83[i] = invert(83, 1, i, perms[83]);
    for (unsigned short i = 0; i < 89; ++i)
        m_perm89[i] = invert(89, 1, i, perms[89]);
    for (unsigned short i = 0; i < 97; ++i)
        m_perm97[i] = invert(97, 1, i, perms[97]);
    for (unsigned short i = 0; i < 101; ++i)
        m_perm101[i] = invert(101, 1, i, perms[101]);
    for (unsigned short i = 0; i < 103; ++i)
        m_perm103[i] = invert(103, 1, i, perms[103]);
    for (unsigned short i = 0; i < 107; ++i)
        m_perm107[i] = invert(107, 1, i, perms[107]);
    for (unsigned short i = 0; i < 109; ++i)
        m_perm109[i] = invert(109, 1, i, perms[109]);
    for (unsigned short i = 0; i < 113; ++i)
        m_perm113[i] = invert(113, 1, i, perms[113]);
    for (unsigned short i = 0; i < 127; ++i)
        m_perm127[i] = invert(127, 1, i, perms[127]);
    for (unsigned short i = 0; i < 131; ++i)
        m_perm131[i] = invert(131, 1, i, perms[131]);
    for (unsigned short i = 0; i < 137; ++i)
        m_perm137[i] = invert(137, 1, i, perms[137]);
    for (unsigned short i = 0; i < 139; ++i)
        m_perm139[i] = invert(139, 1, i, perms[139]);
    for (unsigned short i = 0; i < 149; ++i)
        m_perm149[i] = invert(149, 1, i, perms[149]);
    for (unsigned short i = 0; i < 151; ++i)
        m_perm151[i] = invert(151, 1, i, perms[151]);
    for (unsigned short i = 0; i < 157; ++i)
        m_perm157[i] = invert(157, 1, i, perms[157]);
    for (unsigned short i = 0; i < 163; ++i)
        m_perm163[i] = invert(163, 1, i, perms[163]);
    for (unsigned short i = 0; i < 167; ++i)
        m_perm167[i] = invert(167, 1, i, perms[167]);
    for (unsigned short i = 0; i < 173; ++i)
        m_perm173[i] = invert(173, 1, i, perms[173]);
    for (unsigned short i = 0; i < 179; ++i)
        m_perm179[i] = invert(179, 1, i, perms[179]);
    for (unsigned short i = 0; i < 181; ++i)
        m_perm181[i] = invert(181, 1, i, perms[181]);
    for (unsigned short i = 0; i < 191; ++i)
        m_perm191[i] = invert(191, 1, i, perms[191]);
    for (unsigned short i = 0; i < 193; ++i)
        m_perm193[i] = invert(193, 1, i, perms[193]);
    for (unsigned short i = 0; i < 197; ++i)
        m_perm197[i] = invert(197, 1, i, perms[197]);
    for (unsigned short i = 0; i < 199; ++i)
        m_perm199[i] = invert(199, 1, i, perms[199]);
    for (unsigned short i = 0; i < 211; ++i)
        m_perm211[i] = invert(211, 1, i, perms[211]);
    for (unsigned short i = 0; i < 223; ++i)
        m_perm223[i] = invert(223, 1, i, perms[223]);
    for (unsigned short i = 0; i < 227; ++i)
        m_perm227[i] = invert(227, 1, i, perms[227]);
    for (unsigned short i = 0; i < 229; ++i)
        m_perm229[i] = invert(229, 1, i, perms[229]);
    for (unsigned short i = 0; i < 233; ++i)
        m_perm233[i] = invert(233, 1, i, perms[233]);
    for (unsigned short i = 0; i < 239; ++i)
        m_perm239[i] = invert(239, 1, i, perms[239]);
    for (unsigned short i = 0; i < 241; ++i)
        m_perm241[i] = invert(241, 1, i, perms[241]);
    for (unsigned short i = 0; i < 251; ++i)
        m_perm251[i] = invert(251, 1, i, perms[251]);
    for (unsigned short i = 0; i < 257; ++i)
        m_perm257[i] = invert(257, 1, i, perms[257]);
    for (unsigned short i = 0; i < 263; ++i)
        m_perm263[i] = invert(263, 1, i, perms[263]);
    for (unsigned short i = 0; i < 269; ++i)
        m_perm269[i] = invert(269, 1, i, perms[269]);
    for (unsigned short i = 0; i < 271; ++i)
        m_perm271[i] = invert(271, 1, i, perms[271]);
    for (unsigned short i = 0; i < 277; ++i)
        m_perm277[i] = invert(277, 1, i, perms[277]);
    for (unsigned short i = 0; i < 281; ++i)
        m_perm281[i] = invert(281, 1, i, perms[281]);
    for (unsigned short i = 0; i < 283; ++i)
        m_perm283[i] = invert(283, 1, i, perms[283]);
    for (unsigned short i = 0; i < 293; ++i)
        m_perm293[i] = invert(293, 1, i, perms[293]);
    for (unsigned short i = 0; i < 307; ++i)
        m_perm307[i] = invert(307, 1, i, perms[307]);
    for (unsigned short i = 0; i < 311; ++i)
        m_perm311[i] = invert(311, 1, i, perms[311]);
    for (unsigned short i = 0; i < 313; ++i)
        m_perm313[i] = invert(313, 1, i, perms[313]);
    for (unsigned short i = 0; i < 317; ++i)
        m_perm317[i] = invert(317, 1, i, perms[317]);
    for (unsigned short i = 0; i < 331; ++i)
        m_perm331[i] = invert(331, 1, i, perms[331]);
    for (unsigned short i = 0; i < 337; ++i)
        m_perm337[i] = invert(337, 1, i, perms[337]);
    for (unsigned short i = 0; i < 347; ++i)
        m_perm347[i] = invert(347, 1, i, perms[347]);
    for (unsigned short i = 0; i < 349; ++i)
        m_perm349[i] = invert(349, 1, i, perms[349]);
    for (unsigned short i = 0; i < 353; ++i)
        m_perm353[i] = invert(353, 1, i, perms[353]);
    for (unsigned short i = 0; i < 359; ++i)
        m_perm359[i] = invert(359, 1, i, perms[359]);
    for (unsigned short i = 0; i < 367; ++i)
        m_perm367[i] = invert(367, 1, i, perms[367]);
    for (unsigned short i = 0; i < 373; ++i)
        m_perm373[i] = invert(373, 1, i, perms[373]);
    for (unsigned short i = 0; i < 379; ++i)
        m_perm379[i] = invert(379, 1, i, perms[379]);
    for (unsigned short i = 0; i < 383; ++i)
        m_perm383[i] = invert(383, 1, i, perms[383]);
    for (unsigned short i = 0; i < 389; ++i)
        m_perm389[i] = invert(389, 1, i, perms[389]);
    for (unsigned short i = 0; i < 397; ++i)
        m_perm397[i] = invert(397, 1, i, perms[397]);
    for (unsigned short i = 0; i < 401; ++i)
        m_perm401[i] = invert(401, 1, i, perms[401]);
    for (unsigned short i = 0; i < 409; ++i)
        m_perm409[i] = invert(409, 1, i, perms[409]);
    for (unsigned short i = 0; i < 419; ++i)
        m_perm419[i] = invert(419, 1, i, perms[419]);
    for (unsigned short i = 0; i < 421; ++i)
        m_perm421[i] = invert(421, 1, i, perms[421]);
    for (unsigned short i = 0; i < 431; ++i)
        m_perm431[i] = invert(431, 1, i, perms[431]);
    for (unsigned short i = 0; i < 433; ++i)
        m_perm433[i] = invert(433, 1, i, perms[433]);
    for (unsigned short i = 0; i < 439; ++i)
        m_perm439[i] = invert(439, 1, i, perms[439]);
    for (unsigned short i = 0; i < 443; ++i)
        m_perm443[i] = invert(443, 1, i, perms[443]);
    for (unsigned short i = 0; i < 449; ++i)
        m_perm449[i] = invert(449, 1, i, perms[449]);
    for (unsigned short i = 0; i < 457; ++i)
        m_perm457[i] = invert(457, 1, i, perms[457]);
    for (unsigned short i = 0; i < 461; ++i)
        m_perm461[i] = invert(461, 1, i, perms[461]);
    for (unsigned short i = 0; i < 463; ++i)
        m_perm463[i] = invert(463, 1, i, perms[463]);
    for (unsigned short i = 0; i < 467; ++i)
        m_perm467[i] = invert(467, 1, i, perms[467]);
    for (unsigned short i = 0; i < 479; ++i)
        m_perm479[i] = invert(479, 1, i, perms[479]);
    for (unsigned short i = 0; i < 487; ++i)
        m_perm487[i] = invert(487, 1, i, perms[487]);
    for (unsigned short i = 0; i < 491; ++i)
        m_perm491[i] = invert(491, 1, i, perms[491]);
    for (unsigned short i = 0; i < 499; ++i)
        m_perm499[i] = invert(499, 1, i, perms[499]);
    for (unsigned short i = 0; i < 503; ++i)
        m_perm503[i] = invert(503, 1, i, perms[503]);
    for (unsigned short i = 0; i < 509; ++i)
        m_perm509[i] = invert(509, 1, i, perms[509]);
    for (unsigned short i = 0; i < 521; ++i)
        m_perm521[i] = invert(521, 1, i, perms[521]);
    for (unsigned short i = 0; i < 523; ++i)
        m_perm523[i] = invert(523, 1, i, perms[523]);
    for (unsigned short i = 0; i < 541; ++i)
        m_perm541[i] = invert(541, 1, i, perms[541]);
    for (unsigned short i = 0; i < 547; ++i)
        m_perm547[i] = invert(547, 1, i, perms[547]);
    for (unsigned short i = 0; i < 557; ++i)
        m_perm557[i] = invert(557, 1, i, perms[557]);
    for (unsigned short i = 0; i < 563; ++i)
        m_perm563[i] = invert(563, 1, i, perms[563]);
    for (unsigned short i = 0; i < 569; ++i)
        m_perm569[i] = invert(569, 1, i, perms[569]);
    for (unsigned short i = 0; i < 571; ++i)
        m_perm571[i] = invert(571, 1, i, perms[571]);
    for (unsigned short i = 0; i < 577; ++i)
        m_perm577[i] = invert(577, 1, i, perms[577]);
    for (unsigned short i = 0; i < 587; ++i)
        m_perm587[i] = invert(587, 1, i, perms[587]);
    for (unsigned short i = 0; i < 593; ++i)
        m_perm593[i] = invert(593, 1, i, perms[593]);
    for (unsigned short i = 0; i < 599; ++i)
        m_perm599[i] = invert(599, 1, i, perms[599]);
    for (unsigned short i = 0; i < 601; ++i)
        m_perm601[i] = invert(601, 1, i, perms[601]);
    for (unsigned short i = 0; i < 607; ++i)
        m_perm607[i] = invert(607, 1, i, perms[607]);
    for (unsigned short i = 0; i < 613; ++i)
        m_perm613[i] = invert(613, 1, i, perms[613]);
    for (unsigned short i = 0; i < 617; ++i)
        m_perm617[i] = invert(617, 1, i, perms[617]);
    for (unsigned short i = 0; i < 619; ++i)
        m_perm619[i] = invert(619, 1, i, perms[619]);
    for (unsigned short i = 0; i < 631; ++i)
        m_perm631[i] = invert(631, 1, i, perms[631]);
    for (unsigned short i = 0; i < 641; ++i)
        m_perm641[i] = invert(641, 1, i, perms[641]);
    for (unsigned short i = 0; i < 643; ++i)
        m_perm643[i] = invert(643, 1, i, perms[643]);
    for (unsigned short i = 0; i < 647; ++i)
        m_perm647[i] = invert(647, 1, i, perms[647]);
    for (unsigned short i = 0; i < 653; ++i)
        m_perm653[i] = invert(653, 1, i, perms[653]);
    for (unsigned short i = 0; i < 659; ++i)
        m_perm659[i] = invert(659, 1, i, perms[659]);
    for (unsigned short i = 0; i < 661; ++i)
        m_perm661[i] = invert(661, 1, i, perms[661]);
    for (unsigned short i = 0; i < 673; ++i)
        m_perm673[i] = invert(673, 1, i, perms[673]);
    for (unsigned short i = 0; i < 677; ++i)
        m_perm677[i] = invert(677, 1, i, perms[677]);
    for (unsigned short i = 0; i < 683; ++i)
        m_perm683[i] = invert(683, 1, i, perms[683]);
    for (unsigned short i = 0; i < 691; ++i)
        m_perm691[i] = invert(691, 1, i, perms[691]);
    for (unsigned short i = 0; i < 701; ++i)
        m_perm701[i] = invert(701, 1, i, perms[701]);
    for (unsigned short i = 0; i < 709; ++i)
        m_perm709[i] = invert(709, 1, i, perms[709]);
    for (unsigned short i = 0; i < 719; ++i)
        m_perm719[i] = invert(719, 1, i, perms[719]);
    for (unsigned short i = 0; i < 727; ++i)
        m_perm727[i] = invert(727, 1, i, perms[727]);
    for (unsigned short i = 0; i < 733; ++i)
        m_perm733[i] = invert(733, 1, i, perms[733]);
    for (unsigned short i = 0; i < 739; ++i)
        m_perm739[i] = invert(739, 1, i, perms[739]);
    for (unsigned short i = 0; i < 743; ++i)
        m_perm743[i] = invert(743, 1, i, perms[743]);
    for (unsigned short i = 0; i < 751; ++i)
        m_perm751[i] = invert(751, 1, i, perms[751]);
    for (unsigned short i = 0; i < 757; ++i)
        m_perm757[i] = invert(757, 1, i, perms[757]);
    for (unsigned short i = 0; i < 761; ++i)
        m_perm761[i] = invert(761, 1, i, perms[761]);
    for (unsigned short i = 0; i < 769; ++i)
        m_perm769[i] = invert(769, 1, i, perms[769]);
    for (unsigned short i = 0; i < 773; ++i)
        m_perm773[i] = invert(773, 1, i, perms[773]);
    for (unsigned short i = 0; i < 787; ++i)
        m_perm787[i] = invert(787, 1, i, perms[787]);
    for (unsigned short i = 0; i < 797; ++i)
        m_perm797[i] = invert(797, 1, i, perms[797]);
    for (unsigned short i = 0; i < 809; ++i)
        m_perm809[i] = invert(809, 1, i, perms[809]);
    for (unsigned short i = 0; i < 811; ++i)
        m_perm811[i] = invert(811, 1, i, perms[811]);
    for (unsigned short i = 0; i < 821; ++i)
        m_perm821[i] = invert(821, 1, i, perms[821]);
    for (unsigned short i = 0; i < 823; ++i)
        m_perm823[i] = invert(823, 1, i, perms[823]);
    for (unsigned short i = 0; i < 827; ++i)
        m_perm827[i] = invert(827, 1, i, perms[827]);
    for (unsigned short i = 0; i < 829; ++i)
        m_perm829[i] = invert(829, 1, i, perms[829]);
    for (unsigned short i = 0; i < 839; ++i)
        m_perm839[i] = invert(839, 1, i, perms[839]);
    for (unsigned short i = 0; i < 853; ++i)
        m_perm853[i] = invert(853, 1, i, perms[853]);
    for (unsigned short i = 0; i < 857; ++i)
        m_perm857[i] = invert(857, 1, i, perms[857]);
    for (unsigned short i = 0; i < 859; ++i)
        m_perm859[i] = invert(859, 1, i, perms[859]);
    for (unsigned short i = 0; i < 863; ++i)
        m_perm863[i] = invert(863, 1, i, perms[863]);
    for (unsigned short i = 0; i < 877; ++i)
        m_perm877[i] = invert(877, 1, i, perms[877]);
    for (unsigned short i = 0; i < 881; ++i)
        m_perm881[i] = invert(881, 1, i, perms[881]);
    for (unsigned short i = 0; i < 883; ++i)
        m_perm883[i] = invert(883, 1, i, perms[883]);
    for (unsigned short i = 0; i < 887; ++i)
        m_perm887[i] = invert(887, 1, i, perms[887]);
    for (unsigned short i = 0; i < 907; ++i)
        m_perm907[i] = invert(907, 1, i, perms[907]);
    for (unsigned short i = 0; i < 911; ++i)
        m_perm911[i] = invert(911, 1, i, perms[911]);
    for (unsigned short i = 0; i < 919; ++i)
        m_perm919[i] = invert(919, 1, i, perms[919]);
    for (unsigned short i = 0; i < 929; ++i)
        m_perm929[i] = invert(929, 1, i, perms[929]);
    for (unsigned short i = 0; i < 937; ++i)
        m_perm937[i] = invert(937, 1, i, perms[937]);
    for (unsigned short i = 0; i < 941; ++i)
        m_perm941[i] = invert(941, 1, i, perms[941]);
    for (unsigned short i = 0; i < 947; ++i)
        m_perm947[i] = invert(947, 1, i, perms[947]);
    for (unsigned short i = 0; i < 953; ++i)
        m_perm953[i] = invert(953, 1, i, perms[953]);
    for (unsigned short i = 0; i < 967; ++i)
        m_perm967[i] = invert(967, 1, i, perms[967]);
    for (unsigned short i = 0; i < 971; ++i)
        m_perm971[i] = invert(971, 1, i, perms[971]);
    for (unsigned short i = 0; i < 977; ++i)
        m_perm977[i] = invert(977, 1, i, perms[977]);
    for (unsigned short i = 0; i < 983; ++i)
        m_perm983[i] = invert(983, 1, i, perms[983]);
    for (unsigned short i = 0; i < 991; ++i)
        m_perm991[i] = invert(991, 1, i, perms[991]);
    for (unsigned short i = 0; i < 997; ++i)
        m_perm997[i] = invert(997, 1, i, perms[997]);
    for (unsigned short i = 0; i < 1009; ++i)
        m_perm1009[i] = invert(1009, 1, i, perms[1009]);
    for (unsigned short i = 0; i < 1013; ++i)
        m_perm1013[i] = invert(1013, 1, i, perms[1013]);
    for (unsigned short i = 0; i < 1019; ++i)
        m_perm1019[i] = invert(1019, 1, i, perms[1019]);
    for (unsigned short i = 0; i < 1021; ++i)
        m_perm1021[i] = invert(1021, 1, i, perms[1021]);
    for (unsigned short i = 0; i < 1031; ++i)
        m_perm1031[i] = invert(1031, 1, i, perms[1031]);
    for (unsigned short i = 0; i < 1033; ++i)
        m_perm1033[i] = invert(1033, 1, i, perms[1033]);
    for (unsigned short i = 0; i < 1039; ++i)
        m_perm1039[i] = invert(1039, 1, i, perms[1039]);
    for (unsigned short i = 0; i < 1049; ++i)
        m_perm1049[i] = invert(1049, 1, i, perms[1049]);
    for (unsigned short i = 0; i < 1051; ++i)
        m_perm1051[i] = invert(1051, 1, i, perms[1051]);
    for (unsigned short i = 0; i < 1061; ++i)
        m_perm1061[i] = invert(1061, 1, i, perms[1061]);
    for (unsigned short i = 0; i < 1063; ++i)
        m_perm1063[i] = invert(1063, 1, i, perms[1063]);
    for (unsigned short i = 0; i < 1069; ++i)
        m_perm1069[i] = invert(1069, 1, i, perms[1069]);
    for (unsigned short i = 0; i < 1087; ++i)
        m_perm1087[i] = invert(1087, 1, i, perms[1087]);
    for (unsigned short i = 0; i < 1091; ++i)
        m_perm1091[i] = invert(1091, 1, i, perms[1091]);
    for (unsigned short i = 0; i < 1093; ++i)
        m_perm1093[i] = invert(1093, 1, i, perms[1093]);
    for (unsigned short i = 0; i < 1097; ++i)
        m_perm1097[i] = invert(1097, 1, i, perms[1097]);
    for (unsigned short i = 0; i < 1103; ++i)
        m_perm1103[i] = invert(1103, 1, i, perms[1103]);
    for (unsigned short i = 0; i < 1109; ++i)
        m_perm1109[i] = invert(1109, 1, i, perms[1109]);
    for (unsigned short i = 0; i < 1117; ++i)
        m_perm1117[i] = invert(1117, 1, i, perms[1117]);
    for (unsigned short i = 0; i < 1123; ++i)
        m_perm1123[i] = invert(1123, 1, i, perms[1123]);
    for (unsigned short i = 0; i < 1129; ++i)
        m_perm1129[i] = invert(1129, 1, i, perms[1129]);
    for (unsigned short i = 0; i < 1151; ++i)
        m_perm1151[i] = invert(1151, 1, i, perms[1151]);
    for (unsigned short i = 0; i < 1153; ++i)
        m_perm1153[i] = invert(1153, 1, i, perms[1153]);
    for (unsigned short i = 0; i < 1163; ++i)
        m_perm1163[i] = invert(1163, 1, i, perms[1163]);
    for (unsigned short i = 0; i < 1171; ++i)
        m_perm1171[i] = invert(1171, 1, i, perms[1171]);
    for (unsigned short i = 0; i < 1181; ++i)
        m_perm1181[i] = invert(1181, 1, i, perms[1181]);
    for (unsigned short i = 0; i < 1187; ++i)
        m_perm1187[i] = invert(1187, 1, i, perms[1187]);
    for (unsigned short i = 0; i < 1193; ++i)
        m_perm1193[i] = invert(1193, 1, i, perms[1193]);
    for (unsigned short i = 0; i < 1201; ++i)
        m_perm1201[i] = invert(1201, 1, i, perms[1201]);
    for (unsigned short i = 0; i < 1213; ++i)
        m_perm1213[i] = invert(1213, 1, i, perms[1213]);
    for (unsigned short i = 0; i < 1217; ++i)
        m_perm1217[i] = invert(1217, 1, i, perms[1217]);
    for (unsigned short i = 0; i < 1223; ++i)
        m_perm1223[i] = invert(1223, 1, i, perms[1223]);
    for (unsigned short i = 0; i < 1229; ++i)
        m_perm1229[i] = invert(1229, 1, i, perms[1229]);
    for (unsigned short i = 0; i < 1231; ++i)
        m_perm1231[i] = invert(1231, 1, i, perms[1231]);
    for (unsigned short i = 0; i < 1237; ++i)
        m_perm1237[i] = invert(1237, 1, i, perms[1237]);
    for (unsigned short i = 0; i < 1249; ++i)
        m_perm1249[i] = invert(1249, 1, i, perms[1249]);
    for (unsigned short i = 0; i < 1259; ++i)
        m_perm1259[i] = invert(1259, 1, i, perms[1259]);
    for (unsigned short i = 0; i < 1277; ++i)
        m_perm1277[i] = invert(1277, 1, i, perms[1277]);
    for (unsigned short i = 0; i < 1279; ++i)
        m_perm1279[i] = invert(1279, 1, i, perms[1279]);
    for (unsigned short i = 0; i < 1283; ++i)
        m_perm1283[i] = invert(1283, 1, i, perms[1283]);
    for (unsigned short i = 0; i < 1289; ++i)
        m_perm1289[i] = invert(1289, 1, i, perms[1289]);
    for (unsigned short i = 0; i < 1291; ++i)
        m_perm1291[i] = invert(1291, 1, i, perms[1291]);
    for (unsigned short i = 0; i < 1297; ++i)
        m_perm1297[i] = invert(1297, 1, i, perms[1297]);
    for (unsigned short i = 0; i < 1301; ++i)
        m_perm1301[i] = invert(1301, 1, i, perms[1301]);
    for (unsigned short i = 0; i < 1303; ++i)
        m_perm1303[i] = invert(1303, 1, i, perms[1303]);
    for (unsigned short i = 0; i < 1307; ++i)
        m_perm1307[i] = invert(1307, 1, i, perms[1307]);
    for (unsigned short i = 0; i < 1319; ++i)
        m_perm1319[i] = invert(1319, 1, i, perms[1319]);
    for (unsigned short i = 0; i < 1321; ++i)
        m_perm1321[i] = invert(1321, 1, i, perms[1321]);
    for (unsigned short i = 0; i < 1327; ++i)
        m_perm1327[i] = invert(1327, 1, i, perms[1327]);
    for (unsigned short i = 0; i < 1361; ++i)
        m_perm1361[i] = invert(1361, 1, i, perms[1361]);
    for (unsigned short i = 0; i < 1367; ++i)
        m_perm1367[i] = invert(1367, 1, i, perms[1367]);
    for (unsigned short i = 0; i < 1373; ++i)
        m_perm1373[i] = invert(1373, 1, i, perms[1373]);
    for (unsigned short i = 0; i < 1381; ++i)
        m_perm1381[i] = invert(1381, 1, i, perms[1381]);
    for (unsigned short i = 0; i < 1399; ++i)
        m_perm1399[i] = invert(1399, 1, i, perms[1399]);
    for (unsigned short i = 0; i < 1409; ++i)
        m_perm1409[i] = invert(1409, 1, i, perms[1409]);
    for (unsigned short i = 0; i < 1423; ++i)
        m_perm1423[i] = invert(1423, 1, i, perms[1423]);
    for (unsigned short i = 0; i < 1427; ++i)
        m_perm1427[i] = invert(1427, 1, i, perms[1427]);
    for (unsigned short i = 0; i < 1429; ++i)
        m_perm1429[i] = invert(1429, 1, i, perms[1429]);
    for (unsigned short i = 0; i < 1433; ++i)
        m_perm1433[i] = invert(1433, 1, i, perms[1433]);
    for (unsigned short i = 0; i < 1439; ++i)
        m_perm1439[i] = invert(1439, 1, i, perms[1439]);
    for (unsigned short i = 0; i < 1447; ++i)
        m_perm1447[i] = invert(1447, 1, i, perms[1447]);
    for (unsigned short i = 0; i < 1451; ++i)
        m_perm1451[i] = invert(1451, 1, i, perms[1451]);
    for (unsigned short i = 0; i < 1453; ++i)
        m_perm1453[i] = invert(1453, 1, i, perms[1453]);
    for (unsigned short i = 0; i < 1459; ++i)
        m_perm1459[i] = invert(1459, 1, i, perms[1459]);
    for (unsigned short i = 0; i < 1471; ++i)
        m_perm1471[i] = invert(1471, 1, i, perms[1471]);
    for (unsigned short i = 0; i < 1481; ++i)
        m_perm1481[i] = invert(1481, 1, i, perms[1481]);
    for (unsigned short i = 0; i < 1483; ++i)
        m_perm1483[i] = invert(1483, 1, i, perms[1483]);
    for (unsigned short i = 0; i < 1487; ++i)
        m_perm1487[i] = invert(1487, 1, i, perms[1487]);
    for (unsigned short i = 0; i < 1489; ++i)
        m_perm1489[i] = invert(1489, 1, i, perms[1489]);
    for (unsigned short i = 0; i < 1493; ++i)
        m_perm1493[i] = invert(1493, 1, i, perms[1493]);
    for (unsigned short i = 0; i < 1499; ++i)
        m_perm1499[i] = invert(1499, 1, i, perms[1499]);
    for (unsigned short i = 0; i < 1511; ++i)
        m_perm1511[i] = invert(1511, 1, i, perms[1511]);
    for (unsigned short i = 0; i < 1523; ++i)
        m_perm1523[i] = invert(1523, 1, i, perms[1523]);
    for (unsigned short i = 0; i < 1531; ++i)
        m_perm1531[i] = invert(1531, 1, i, perms[1531]);
    for (unsigned short i = 0; i < 1543; ++i)
        m_perm1543[i] = invert(1543, 1, i, perms[1543]);
    for (unsigned short i = 0; i < 1549; ++i)
        m_perm1549[i] = invert(1549, 1, i, perms[1549]);
    for (unsigned short i = 0; i < 1553; ++i)
        m_perm1553[i] = invert(1553, 1, i, perms[1553]);
    for (unsigned short i = 0; i < 1559; ++i)
        m_perm1559[i] = invert(1559, 1, i, perms[1559]);
    for (unsigned short i = 0; i < 1567; ++i)
        m_perm1567[i] = invert(1567, 1, i, perms[1567]);
    for (unsigned short i = 0; i < 1571; ++i)
        m_perm1571[i] = invert(1571, 1, i, perms[1571]);
    for (unsigned short i = 0; i < 1579; ++i)
        m_perm1579[i] = invert(1579, 1, i, perms[1579]);
    for (unsigned short i = 0; i < 1583; ++i)
        m_perm1583[i] = invert(1583, 1, i, perms[1583]);
    for (unsigned short i = 0; i < 1597; ++i)
        m_perm1597[i] = invert(1597, 1, i, perms[1597]);
    for (unsigned short i = 0; i < 1601; ++i)
        m_perm1601[i] = invert(1601, 1, i, perms[1601]);
    for (unsigned short i = 0; i < 1607; ++i)
        m_perm1607[i] = invert(1607, 1, i, perms[1607]);
    for (unsigned short i = 0; i < 1609; ++i)
        m_perm1609[i] = invert(1609, 1, i, perms[1609]);
    for (unsigned short i = 0; i < 1613; ++i)
        m_perm1613[i] = invert(1613, 1, i, perms[1613]);
    for (unsigned short i = 0; i < 1619; ++i)
        m_perm1619[i] = invert(1619, 1, i, perms[1619]);
}



// Special case: radical inverse in base 2, with direct bit reversal.
inline float Halton_sampler::halton2(unsigned long long index) const
{	

	index = reverse_bit64(index);
    union Result
    {
        unsigned long long u;
        float f;
    } result; // Write reversed bits directly into floating-point mantissa.
    result.u = 0x3f800000ul | (index >> 41);
    return (float)result.f - 1.f;
}


inline float Halton_sampler::halton3(const unsigned long long index) const
{
	return (m_perm3[index % 243ull] * 14348907ull +
		m_perm3[(index / 243ull) % 243ull] * 59049ull +
		m_perm3[(index / 59049ull) % 243ull] * 243ull +
		m_perm3[(index / 14348907ull) % 243ull]) * float(0x1.fffffcp-1 / 3486784401ull); // Results in [0,1).
}

inline float Halton_sampler::halton5(const unsigned long long index) const
{
	return (m_perm5[index % 125ull] * 1953125ull +
		m_perm5[(index / 125ull) % 125ull] * 15625ull +
		m_perm5[(index / 15625ull) % 125ull] * 125ull +
		m_perm5[(index / 1953125ull) % 125ull]) * float(0x1.fffffcp-1 / 244140625ull); // Results in [0,1).
}

inline float Halton_sampler::halton7(const unsigned long long index) const
{
	return (m_perm7[index % 343ull] * 117649ull +
		m_perm7[(index / 343ull) % 343ull] * 343ull +
		m_perm7[(index / 117649ull) % 343ull]) * float(0x1.fffffcp-1 / 40353607ull); // Results in [0,1).
}

inline float Halton_sampler::halton11(const unsigned long long index) const
{
	return (m_perm11[index % 121ull] * 1771561ull +
		m_perm11[(index / 121ull) % 121ull] * 14641ull +
		m_perm11[(index / 14641ull) % 121ull] * 121ull +
		m_perm11[(index / 1771561ull) % 121ull]) * float(0x1.fffffcp-1 / 214358881ull); // Results in [0,1).
}

inline float Halton_sampler::halton13(const unsigned long long index) const
{
	return (m_perm13[index % 169ull] * 4826809ull +
		m_perm13[(index / 169ull) % 169ull] * 28561ull +
		m_perm13[(index / 28561ull) % 169ull] * 169ull +
		m_perm13[(index / 4826809ull) % 169ull]) * float(0x1.fffffcp-1 / 815730721ull); // Results in [0,1).
}

inline float Halton_sampler::halton17(const unsigned long long index) const
{
	return (m_perm17[index % 289ull] * 83521ull +
		m_perm17[(index / 289ull) % 289ull] * 289ull +
		m_perm17[(index / 83521ull) % 289ull]) * float(0x1.fffffcp-1 / 24137569ull); // Results in [0,1).
}

inline float Halton_sampler::halton19(const unsigned long long index) const
{
	return (m_perm19[index % 361ull] * 130321ull +
		m_perm19[(index / 361ull) % 361ull] * 361ull +
		m_perm19[(index / 130321ull) % 361ull]) * float(0x1.fffffcp-1 / 47045881ull); // Results in [0,1).
}

inline float Halton_sampler::halton23(const unsigned long long index) const
{
	return (m_perm23[index % 23ull] * 148035889ull +
		m_perm23[(index / 23ull) % 23ull] * 6436343ull +
		m_perm23[(index / 529ull) % 23ull] * 279841ull +
		m_perm23[(index / 12167ull) % 23ull] * 12167ull +
		m_perm23[(index / 279841ull) % 23ull] * 529ull +
		m_perm23[(index / 6436343ull) % 23ull] * 23ull +
		m_perm23[(index / 148035889ull) % 23ull]) * float(0x1.fffffcp-1 / 3404825447ull); // Results in [0,1).
}

inline float Halton_sampler::halton29(const unsigned long long index) const
{
	return (m_perm29[index % 29ull] * 20511149ull +
		m_perm29[(index / 29ull) % 29ull] * 707281ull +
		m_perm29[(index / 841ull) % 29ull] * 24389ull +
		m_perm29[(index / 24389ull) % 29ull] * 841ull +
		m_perm29[(index / 707281ull) % 29ull] * 29ull +
		m_perm29[(index / 20511149ull) % 29ull]) * float(0x1.fffffcp-1 / 594823321ull); // Results in [0,1).
}

inline float Halton_sampler::halton31(const unsigned long long index) const
{
	return (m_perm31[index % 31ull] * 28629151ull +
		m_perm31[(index / 31ull) % 31ull] * 923521ull +
		m_perm31[(index / 961ull) % 31ull] * 29791ull +
		m_perm31[(index / 29791ull) % 31ull] * 961ull +
		m_perm31[(index / 923521ull) % 31ull] * 31ull +
		m_perm31[(index / 28629151ull) % 31ull]) * float(0x1.fffffcp-1 / 887503681ull); // Results in [0,1).
}

inline float Halton_sampler::halton37(const unsigned long long index) const
{
	return (m_perm37[index % 37ull] * 69343957ull +
		m_perm37[(index / 37ull) % 37ull] * 1874161ull +
		m_perm37[(index / 1369ull) % 37ull] * 50653ull +
		m_perm37[(index / 50653ull) % 37ull] * 1369ull +
		m_perm37[(index / 1874161ull) % 37ull] * 37ull +
		m_perm37[(index / 69343957ull) % 37ull]) * float(0x1.fffffcp-1 / 2565726409ull); // Results in [0,1).
}

inline float Halton_sampler::halton41(const unsigned long long index) const
{
	return (m_perm41[index % 41ull] * 2825761ull +
		m_perm41[(index / 41ull) % 41ull] * 68921ull +
		m_perm41[(index / 1681ull) % 41ull] * 1681ull +
		m_perm41[(index / 68921ull) % 41ull] * 41ull +
		m_perm41[(index / 2825761ull) % 41ull]) * float(0x1.fffffcp-1 / 115856201ull); // Results in [0,1).
}

inline float Halton_sampler::halton43(const unsigned long long index) const
{
	return (m_perm43[index % 43ull] * 3418801ull +
		m_perm43[(index / 43ull) % 43ull] * 79507ull +
		m_perm43[(index / 1849ull) % 43ull] * 1849ull +
		m_perm43[(index / 79507ull) % 43ull] * 43ull +
		m_perm43[(index / 3418801ull) % 43ull]) * float(0x1.fffffcp-1 / 147008443ull); // Results in [0,1).
}

inline float Halton_sampler::halton47(const unsigned long long index) const
{
	return (m_perm47[index % 47ull] * 4879681ull +
		m_perm47[(index / 47ull) % 47ull] * 103823ull +
		m_perm47[(index / 2209ull) % 47ull] * 2209ull +
		m_perm47[(index / 103823ull) % 47ull] * 47ull +
		m_perm47[(index / 4879681ull) % 47ull]) * float(0x1.fffffcp-1 / 229345007ull); // Results in [0,1).
}

inline float Halton_sampler::halton53(const unsigned long long index) const
{
	return (m_perm53[index % 53ull] * 7890481ull +
		m_perm53[(index / 53ull) % 53ull] * 148877ull +
		m_perm53[(index / 2809ull) % 53ull] * 2809ull +
		m_perm53[(index / 148877ull) % 53ull] * 53ull +
		m_perm53[(index / 7890481ull) % 53ull]) * float(0x1.fffffcp-1 / 418195493ull); // Results in [0,1).
}

inline float Halton_sampler::halton59(const unsigned long long index) const
{
	return (m_perm59[index % 59ull] * 12117361ull +
		m_perm59[(index / 59ull) % 59ull] * 205379ull +
		m_perm59[(index / 3481ull) % 59ull] * 3481ull +
		m_perm59[(index / 205379ull) % 59ull] * 59ull +
		m_perm59[(index / 12117361ull) % 59ull]) * float(0x1.fffffcp-1 / 714924299ull); // Results in [0,1).
}

inline float Halton_sampler::halton61(const unsigned long long index) const
{
	return (m_perm61[index % 61ull] * 13845841ull +
		m_perm61[(index / 61ull) % 61ull] * 226981ull +
		m_perm61[(index / 3721ull) % 61ull] * 3721ull +
		m_perm61[(index / 226981ull) % 61ull] * 61ull +
		m_perm61[(index / 13845841ull) % 61ull]) * float(0x1.fffffcp-1 / 844596301ull); // Results in [0,1).
}

inline float Halton_sampler::halton67(const unsigned long long index) const
{
	return (m_perm67[index % 67ull] * 20151121ull +
		m_perm67[(index / 67ull) % 67ull] * 300763ull +
		m_perm67[(index / 4489ull) % 67ull] * 4489ull +
		m_perm67[(index / 300763ull) % 67ull] * 67ull +
		m_perm67[(index / 20151121ull) % 67ull]) * float(0x1.fffffcp-1 / 1350125107ull); // Results in [0,1).
}

inline float Halton_sampler::halton71(const unsigned long long index) const
{
	return (m_perm71[index % 71ull] * 25411681ull +
		m_perm71[(index / 71ull) % 71ull] * 357911ull +
		m_perm71[(index / 5041ull) % 71ull] * 5041ull +
		m_perm71[(index / 357911ull) % 71ull] * 71ull +
		m_perm71[(index / 25411681ull) % 71ull]) * float(0x1.fffffcp-1 / 1804229351ull); // Results in [0,1).
}

inline float Halton_sampler::halton73(const unsigned long long index) const
{
	return (m_perm73[index % 73ull] * 28398241ull +
		m_perm73[(index / 73ull) % 73ull] * 389017ull +
		m_perm73[(index / 5329ull) % 73ull] * 5329ull +
		m_perm73[(index / 389017ull) % 73ull] * 73ull +
		m_perm73[(index / 28398241ull) % 73ull]) * float(0x1.fffffcp-1 / 2073071593ull); // Results in [0,1).
}

inline float Halton_sampler::halton79(const unsigned long long index) const
{
	return (m_perm79[index % 79ull] * 38950081ull +
		m_perm79[(index / 79ull) % 79ull] * 493039ull +
		m_perm79[(index / 6241ull) % 79ull] * 6241ull +
		m_perm79[(index / 493039ull) % 79ull] * 79ull +
		m_perm79[(index / 38950081ull) % 79ull]) * float(0x1.fffffcp-1 / 3077056399ull); // Results in [0,1).
}

inline float Halton_sampler::halton83(const unsigned long long index) const
{
	return (m_perm83[index % 83ull] * 47458321ull +
		m_perm83[(index / 83ull) % 83ull] * 571787ull +
		m_perm83[(index / 6889ull) % 83ull] * 6889ull +
		m_perm83[(index / 571787ull) % 83ull] * 83ull +
		m_perm83[(index / 47458321ull) % 83ull]) * float(0x1.fffffcp-1 / 3939040643ull); // Results in [0,1).
}

inline float Halton_sampler::halton89(const unsigned long long index) const
{
	return (m_perm89[index % 89ull] * 704969ull +
		m_perm89[(index / 89ull) % 89ull] * 7921ull +
		m_perm89[(index / 7921ull) % 89ull] * 89ull +
		m_perm89[(index / 704969ull) % 89ull]) * float(0x1.fffffcp-1 / 62742241ull); // Results in [0,1).
}

inline float Halton_sampler::halton97(const unsigned long long index) const
{
	return (m_perm97[index % 97ull] * 912673ull +
		m_perm97[(index / 97ull) % 97ull] * 9409ull +
		m_perm97[(index / 9409ull) % 97ull] * 97ull +
		m_perm97[(index / 912673ull) % 97ull]) * float(0x1.fffffcp-1 / 88529281ull); // Results in [0,1).
}

inline float Halton_sampler::halton101(const unsigned long long index) const
{
	return (m_perm101[index % 101ull] * 1030301ull +
		m_perm101[(index / 101ull) % 101ull] * 10201ull +
		m_perm101[(index / 10201ull) % 101ull] * 101ull +
		m_perm101[(index / 1030301ull) % 101ull]) * float(0x1.fffffcp-1 / 104060401ull); // Results in [0,1).
}

inline float Halton_sampler::halton103(const unsigned long long index) const
{
	return (m_perm103[index % 103ull] * 1092727ull +
		m_perm103[(index / 103ull) % 103ull] * 10609ull +
		m_perm103[(index / 10609ull) % 103ull] * 103ull +
		m_perm103[(index / 1092727ull) % 103ull]) * float(0x1.fffffcp-1 / 112550881ull); // Results in [0,1).
}

inline float Halton_sampler::halton107(const unsigned long long index) const
{
	return (m_perm107[index % 107ull] * 1225043ull +
		m_perm107[(index / 107ull) % 107ull] * 11449ull +
		m_perm107[(index / 11449ull) % 107ull] * 107ull +
		m_perm107[(index / 1225043ull) % 107ull]) * float(0x1.fffffcp-1 / 131079601ull); // Results in [0,1).
}

inline float Halton_sampler::halton109(const unsigned long long index) const
{
	return (m_perm109[index % 109ull] * 1295029ull +
		m_perm109[(index / 109ull) % 109ull] * 11881ull +
		m_perm109[(index / 11881ull) % 109ull] * 109ull +
		m_perm109[(index / 1295029ull) % 109ull]) * float(0x1.fffffcp-1 / 141158161ull); // Results in [0,1).
}

inline float Halton_sampler::halton113(const unsigned long long index) const
{
	return (m_perm113[index % 113ull] * 1442897ull +
		m_perm113[(index / 113ull) % 113ull] * 12769ull +
		m_perm113[(index / 12769ull) % 113ull] * 113ull +
		m_perm113[(index / 1442897ull) % 113ull]) * float(0x1.fffffcp-1 / 163047361ull); // Results in [0,1).
}

inline float Halton_sampler::halton127(const unsigned long long index) const
{
	return (m_perm127[index % 127ull] * 2048383ull +
		m_perm127[(index / 127ull) % 127ull] * 16129ull +
		m_perm127[(index / 16129ull) % 127ull] * 127ull +
		m_perm127[(index / 2048383ull) % 127ull]) * float(0x1.fffffcp-1 / 260144641ull); // Results in [0,1).
}

inline float Halton_sampler::halton131(const unsigned long long index) const
{
	return (m_perm131[index % 131ull] * 2248091ull +
		m_perm131[(index / 131ull) % 131ull] * 17161ull +
		m_perm131[(index / 17161ull) % 131ull] * 131ull +
		m_perm131[(index / 2248091ull) % 131ull]) * float(0x1.fffffcp-1 / 294499921ull); // Results in [0,1).
}

inline float Halton_sampler::halton137(const unsigned long long index) const
{
	return (m_perm137[index % 137ull] * 2571353ull +
		m_perm137[(index / 137ull) % 137ull] * 18769ull +
		m_perm137[(index / 18769ull) % 137ull] * 137ull +
		m_perm137[(index / 2571353ull) % 137ull]) * float(0x1.fffffcp-1 / 352275361ull); // Results in [0,1).
}

inline float Halton_sampler::halton139(const unsigned long long index) const
{
	return (m_perm139[index % 139ull] * 2685619ull +
		m_perm139[(index / 139ull) % 139ull] * 19321ull +
		m_perm139[(index / 19321ull) % 139ull] * 139ull +
		m_perm139[(index / 2685619ull) % 139ull]) * float(0x1.fffffcp-1 / 373301041ull); // Results in [0,1).
}

inline float Halton_sampler::halton149(const unsigned long long index) const
{
	return (m_perm149[index % 149ull] * 3307949ull +
		m_perm149[(index / 149ull) % 149ull] * 22201ull +
		m_perm149[(index / 22201ull) % 149ull] * 149ull +
		m_perm149[(index / 3307949ull) % 149ull]) * float(0x1.fffffcp-1 / 492884401ull); // Results in [0,1).
}

inline float Halton_sampler::halton151(const unsigned long long index) const
{
	return (m_perm151[index % 151ull] * 3442951ull +
		m_perm151[(index / 151ull) % 151ull] * 22801ull +
		m_perm151[(index / 22801ull) % 151ull] * 151ull +
		m_perm151[(index / 3442951ull) % 151ull]) * float(0x1.fffffcp-1 / 519885601ull); // Results in [0,1).
}

inline float Halton_sampler::halton157(const unsigned long long index) const
{
	return (m_perm157[index % 157ull] * 3869893ull +
		m_perm157[(index / 157ull) % 157ull] * 24649ull +
		m_perm157[(index / 24649ull) % 157ull] * 157ull +
		m_perm157[(index / 3869893ull) % 157ull]) * float(0x1.fffffcp-1 / 607573201ull); // Results in [0,1).
}

inline float Halton_sampler::halton163(const unsigned long long index) const
{
	return (m_perm163[index % 163ull] * 4330747ull +
		m_perm163[(index / 163ull) % 163ull] * 26569ull +
		m_perm163[(index / 26569ull) % 163ull] * 163ull +
		m_perm163[(index / 4330747ull) % 163ull]) * float(0x1.fffffcp-1 / 705911761ull); // Results in [0,1).
}

inline float Halton_sampler::halton167(const unsigned long long index) const
{
	return (m_perm167[index % 167ull] * 4657463ull +
		m_perm167[(index / 167ull) % 167ull] * 27889ull +
		m_perm167[(index / 27889ull) % 167ull] * 167ull +
		m_perm167[(index / 4657463ull) % 167ull]) * float(0x1.fffffcp-1 / 777796321ull); // Results in [0,1).
}

inline float Halton_sampler::halton173(const unsigned long long index) const
{
	return (m_perm173[index % 173ull] * 5177717ull +
		m_perm173[(index / 173ull) % 173ull] * 29929ull +
		m_perm173[(index / 29929ull) % 173ull] * 173ull +
		m_perm173[(index / 5177717ull) % 173ull]) * float(0x1.fffffcp-1 / 895745041ull); // Results in [0,1).
}

inline float Halton_sampler::halton179(const unsigned long long index) const
{
	return (m_perm179[index % 179ull] * 5735339ull +
		m_perm179[(index / 179ull) % 179ull] * 32041ull +
		m_perm179[(index / 32041ull) % 179ull] * 179ull +
		m_perm179[(index / 5735339ull) % 179ull]) * float(0x1.fffffcp-1 / 1026625681ull); // Results in [0,1).
}

inline float Halton_sampler::halton181(const unsigned long long index) const
{
	return (m_perm181[index % 181ull] * 5929741ull +
		m_perm181[(index / 181ull) % 181ull] * 32761ull +
		m_perm181[(index / 32761ull) % 181ull] * 181ull +
		m_perm181[(index / 5929741ull) % 181ull]) * float(0x1.fffffcp-1 / 1073283121ull); // Results in [0,1).
}

inline float Halton_sampler::halton191(const unsigned long long index) const
{
	return (m_perm191[index % 191ull] * 6967871ull +
		m_perm191[(index / 191ull) % 191ull] * 36481ull +
		m_perm191[(index / 36481ull) % 191ull] * 191ull +
		m_perm191[(index / 6967871ull) % 191ull]) * float(0x1.fffffcp-1 / 1330863361ull); // Results in [0,1).
}

inline float Halton_sampler::halton193(const unsigned long long index) const
{
	return (m_perm193[index % 193ull] * 7189057ull +
		m_perm193[(index / 193ull) % 193ull] * 37249ull +
		m_perm193[(index / 37249ull) % 193ull] * 193ull +
		m_perm193[(index / 7189057ull) % 193ull]) * float(0x1.fffffcp-1 / 1387488001ull); // Results in [0,1).
}

inline float Halton_sampler::halton197(const unsigned long long index) const
{
	return (m_perm197[index % 197ull] * 7645373ull +
		m_perm197[(index / 197ull) % 197ull] * 38809ull +
		m_perm197[(index / 38809ull) % 197ull] * 197ull +
		m_perm197[(index / 7645373ull) % 197ull]) * float(0x1.fffffcp-1 / 1506138481ull); // Results in [0,1).
}

inline float Halton_sampler::halton199(const unsigned long long index) const
{
	return (m_perm199[index % 199ull] * 7880599ull +
		m_perm199[(index / 199ull) % 199ull] * 39601ull +
		m_perm199[(index / 39601ull) % 199ull] * 199ull +
		m_perm199[(index / 7880599ull) % 199ull]) * float(0x1.fffffcp-1 / 1568239201ull); // Results in [0,1).
}

inline float Halton_sampler::halton211(const unsigned long long index) const
{
	return (m_perm211[index % 211ull] * 9393931ull +
		m_perm211[(index / 211ull) % 211ull] * 44521ull +
		m_perm211[(index / 44521ull) % 211ull] * 211ull +
		m_perm211[(index / 9393931ull) % 211ull]) * float(0x1.fffffcp-1 / 1982119441ull); // Results in [0,1).
}

inline float Halton_sampler::halton223(const unsigned long long index) const
{
	return (m_perm223[index % 223ull] * 11089567ull +
		m_perm223[(index / 223ull) % 223ull] * 49729ull +
		m_perm223[(index / 49729ull) % 223ull] * 223ull +
		m_perm223[(index / 11089567ull) % 223ull]) * float(0x1.fffffcp-1 / 2472973441ull); // Results in [0,1).
}

inline float Halton_sampler::halton227(const unsigned long long index) const
{
	return (m_perm227[index % 227ull] * 11697083ull +
		m_perm227[(index / 227ull) % 227ull] * 51529ull +
		m_perm227[(index / 51529ull) % 227ull] * 227ull +
		m_perm227[(index / 11697083ull) % 227ull]) * float(0x1.fffffcp-1 / 2655237841ull); // Results in [0,1).
}

inline float Halton_sampler::halton229(const unsigned long long index) const
{
	return (m_perm229[index % 229ull] * 12008989ull +
		m_perm229[(index / 229ull) % 229ull] * 52441ull +
		m_perm229[(index / 52441ull) % 229ull] * 229ull +
		m_perm229[(index / 12008989ull) % 229ull]) * float(0x1.fffffcp-1 / 2750058481ull); // Results in [0,1).
}

inline float Halton_sampler::halton233(const unsigned long long index) const
{
	return (m_perm233[index % 233ull] * 12649337ull +
		m_perm233[(index / 233ull) % 233ull] * 54289ull +
		m_perm233[(index / 54289ull) % 233ull] * 233ull +
		m_perm233[(index / 12649337ull) % 233ull]) * float(0x1.fffffcp-1 / 2947295521ull); // Results in [0,1).
}

inline float Halton_sampler::halton239(const unsigned long long index) const
{
	return (m_perm239[index % 239ull] * 13651919ull +
		m_perm239[(index / 239ull) % 239ull] * 57121ull +
		m_perm239[(index / 57121ull) % 239ull] * 239ull +
		m_perm239[(index / 13651919ull) % 239ull]) * float(0x1.fffffcp-1 / 3262808641ull); // Results in [0,1).
}

inline float Halton_sampler::halton241(const unsigned long long index) const
{
	return (m_perm241[index % 241ull] * 13997521ull +
		m_perm241[(index / 241ull) % 241ull] * 58081ull +
		m_perm241[(index / 58081ull) % 241ull] * 241ull +
		m_perm241[(index / 13997521ull) % 241ull]) * float(0x1.fffffcp-1 / 3373402561ull); // Results in [0,1).
}

inline float Halton_sampler::halton251(const unsigned long long index) const
{
	return (m_perm251[index % 251ull] * 15813251ull +
		m_perm251[(index / 251ull) % 251ull] * 63001ull +
		m_perm251[(index / 63001ull) % 251ull] * 251ull +
		m_perm251[(index / 15813251ull) % 251ull]) * float(0x1.fffffcp-1 / 3969126001ull); // Results in [0,1).
}

inline float Halton_sampler::halton257(const unsigned long long index) const
{
	return (m_perm257[index % 257ull] * 66049ull +
		m_perm257[(index / 257ull) % 257ull] * 257ull +
		m_perm257[(index / 66049ull) % 257ull]) * float(0x1.fffffcp-1 / 16974593ull); // Results in [0,1).
}

inline float Halton_sampler::halton263(const unsigned long long index) const
{
	return (m_perm263[index % 263ull] * 69169ull +
		m_perm263[(index / 263ull) % 263ull] * 263ull +
		m_perm263[(index / 69169ull) % 263ull]) * float(0x1.fffffcp-1 / 18191447ull); // Results in [0,1).
}

inline float Halton_sampler::halton269(const unsigned long long index) const
{
	return (m_perm269[index % 269ull] * 72361ull +
		m_perm269[(index / 269ull) % 269ull] * 269ull +
		m_perm269[(index / 72361ull) % 269ull]) * float(0x1.fffffcp-1 / 19465109ull); // Results in [0,1).
}

inline float Halton_sampler::halton271(const unsigned long long index) const
{
	return (m_perm271[index % 271ull] * 73441ull +
		m_perm271[(index / 271ull) % 271ull] * 271ull +
		m_perm271[(index / 73441ull) % 271ull]) * float(0x1.fffffcp-1 / 19902511ull); // Results in [0,1).
}

inline float Halton_sampler::halton277(const unsigned long long index) const
{
	return (m_perm277[index % 277ull] * 76729ull +
		m_perm277[(index / 277ull) % 277ull] * 277ull +
		m_perm277[(index / 76729ull) % 277ull]) * float(0x1.fffffcp-1 / 21253933ull); // Results in [0,1).
}

inline float Halton_sampler::halton281(const unsigned long long index) const
{
	return (m_perm281[index % 281ull] * 78961ull +
		m_perm281[(index / 281ull) % 281ull] * 281ull +
		m_perm281[(index / 78961ull) % 281ull]) * float(0x1.fffffcp-1 / 22188041ull); // Results in [0,1).
}

inline float Halton_sampler::halton283(const unsigned long long index) const
{
	return (m_perm283[index % 283ull] * 80089ull +
		m_perm283[(index / 283ull) % 283ull] * 283ull +
		m_perm283[(index / 80089ull) % 283ull]) * float(0x1.fffffcp-1 / 22665187ull); // Results in [0,1).
}

inline float Halton_sampler::halton293(const unsigned long long index) const
{
	return (m_perm293[index % 293ull] * 85849ull +
		m_perm293[(index / 293ull) % 293ull] * 293ull +
		m_perm293[(index / 85849ull) % 293ull]) * float(0x1.fffffcp-1 / 25153757ull); // Results in [0,1).
}

inline float Halton_sampler::halton307(const unsigned long long index) const
{
	return (m_perm307[index % 307ull] * 94249ull +
		m_perm307[(index / 307ull) % 307ull] * 307ull +
		m_perm307[(index / 94249ull) % 307ull]) * float(0x1.fffffcp-1 / 28934443ull); // Results in [0,1).
}

inline float Halton_sampler::halton311(const unsigned long long index) const
{
	return (m_perm311[index % 311ull] * 96721ull +
		m_perm311[(index / 311ull) % 311ull] * 311ull +
		m_perm311[(index / 96721ull) % 311ull]) * float(0x1.fffffcp-1 / 30080231ull); // Results in [0,1).
}

inline float Halton_sampler::halton313(const unsigned long long index) const
{
	return (m_perm313[index % 313ull] * 97969ull +
		m_perm313[(index / 313ull) % 313ull] * 313ull +
		m_perm313[(index / 97969ull) % 313ull]) * float(0x1.fffffcp-1 / 30664297ull); // Results in [0,1).
}

inline float Halton_sampler::halton317(const unsigned long long index) const
{
	return (m_perm317[index % 317ull] * 100489ull +
		m_perm317[(index / 317ull) % 317ull] * 317ull +
		m_perm317[(index / 100489ull) % 317ull]) * float(0x1.fffffcp-1 / 31855013ull); // Results in [0,1).
}

inline float Halton_sampler::halton331(const unsigned long long index) const
{
	return (m_perm331[index % 331ull] * 109561ull +
		m_perm331[(index / 331ull) % 331ull] * 331ull +
		m_perm331[(index / 109561ull) % 331ull]) * float(0x1.fffffcp-1 / 36264691ull); // Results in [0,1).
}

inline float Halton_sampler::halton337(const unsigned long long index) const
{
	return (m_perm337[index % 337ull] * 113569ull +
		m_perm337[(index / 337ull) % 337ull] * 337ull +
		m_perm337[(index / 113569ull) % 337ull]) * float(0x1.fffffcp-1 / 38272753ull); // Results in [0,1).
}

inline float Halton_sampler::halton347(const unsigned long long index) const
{
	return (m_perm347[index % 347ull] * 120409ull +
		m_perm347[(index / 347ull) % 347ull] * 347ull +
		m_perm347[(index / 120409ull) % 347ull]) * float(0x1.fffffcp-1 / 41781923ull); // Results in [0,1).
}

inline float Halton_sampler::halton349(const unsigned long long index) const
{
	return (m_perm349[index % 349ull] * 121801ull +
		m_perm349[(index / 349ull) % 349ull] * 349ull +
		m_perm349[(index / 121801ull) % 349ull]) * float(0x1.fffffcp-1 / 42508549ull); // Results in [0,1).
}

inline float Halton_sampler::halton353(const unsigned long long index) const
{
	return (m_perm353[index % 353ull] * 124609ull +
		m_perm353[(index / 353ull) % 353ull] * 353ull +
		m_perm353[(index / 124609ull) % 353ull]) * float(0x1.fffffcp-1 / 43986977ull); // Results in [0,1).
}

inline float Halton_sampler::halton359(const unsigned long long index) const
{
	return (m_perm359[index % 359ull] * 128881ull +
		m_perm359[(index / 359ull) % 359ull] * 359ull +
		m_perm359[(index / 128881ull) % 359ull]) * float(0x1.fffffcp-1 / 46268279ull); // Results in [0,1).
}

inline float Halton_sampler::halton367(const unsigned long long index) const
{
	return (m_perm367[index % 367ull] * 134689ull +
		m_perm367[(index / 367ull) % 367ull] * 367ull +
		m_perm367[(index / 134689ull) % 367ull]) * float(0x1.fffffcp-1 / 49430863ull); // Results in [0,1).
}

inline float Halton_sampler::halton373(const unsigned long long index) const
{
	return (m_perm373[index % 373ull] * 139129ull +
		m_perm373[(index / 373ull) % 373ull] * 373ull +
		m_perm373[(index / 139129ull) % 373ull]) * float(0x1.fffffcp-1 / 51895117ull); // Results in [0,1).
}

inline float Halton_sampler::halton379(const unsigned long long index) const
{
	return (m_perm379[index % 379ull] * 143641ull +
		m_perm379[(index / 379ull) % 379ull] * 379ull +
		m_perm379[(index / 143641ull) % 379ull]) * float(0x1.fffffcp-1 / 54439939ull); // Results in [0,1).
}

inline float Halton_sampler::halton383(const unsigned long long index) const
{
	return (m_perm383[index % 383ull] * 146689ull +
		m_perm383[(index / 383ull) % 383ull] * 383ull +
		m_perm383[(index / 146689ull) % 383ull]) * float(0x1.fffffcp-1 / 56181887ull); // Results in [0,1).
}

inline float Halton_sampler::halton389(const unsigned long long index) const
{
	return (m_perm389[index % 389ull] * 151321ull +
		m_perm389[(index / 389ull) % 389ull] * 389ull +
		m_perm389[(index / 151321ull) % 389ull]) * float(0x1.fffffcp-1 / 58863869ull); // Results in [0,1).
}

inline float Halton_sampler::halton397(const unsigned long long index) const
{
	return (m_perm397[index % 397ull] * 157609ull +
		m_perm397[(index / 397ull) % 397ull] * 397ull +
		m_perm397[(index / 157609ull) % 397ull]) * float(0x1.fffffcp-1 / 62570773ull); // Results in [0,1).
}

inline float Halton_sampler::halton401(const unsigned long long index) const
{
	return (m_perm401[index % 401ull] * 160801ull +
		m_perm401[(index / 401ull) % 401ull] * 401ull +
		m_perm401[(index / 160801ull) % 401ull]) * float(0x1.fffffcp-1 / 64481201ull); // Results in [0,1).
}

inline float Halton_sampler::halton409(const unsigned long long index) const
{
	return (m_perm409[index % 409ull] * 167281ull +
		m_perm409[(index / 409ull) % 409ull] * 409ull +
		m_perm409[(index / 167281ull) % 409ull]) * float(0x1.fffffcp-1 / 68417929ull); // Results in [0,1).
}

inline float Halton_sampler::halton419(const unsigned long long index) const
{
	return (m_perm419[index % 419ull] * 175561ull +
		m_perm419[(index / 419ull) % 419ull] * 419ull +
		m_perm419[(index / 175561ull) % 419ull]) * float(0x1.fffffcp-1 / 73560059ull); // Results in [0,1).
}

inline float Halton_sampler::halton421(const unsigned long long index) const
{
	return (m_perm421[index % 421ull] * 177241ull +
		m_perm421[(index / 421ull) % 421ull] * 421ull +
		m_perm421[(index / 177241ull) % 421ull]) * float(0x1.fffffcp-1 / 74618461ull); // Results in [0,1).
}

inline float Halton_sampler::halton431(const unsigned long long index) const
{
	return (m_perm431[index % 431ull] * 185761ull +
		m_perm431[(index / 431ull) % 431ull] * 431ull +
		m_perm431[(index / 185761ull) % 431ull]) * float(0x1.fffffcp-1 / 80062991ull); // Results in [0,1).
}

inline float Halton_sampler::halton433(const unsigned long long index) const
{
	return (m_perm433[index % 433ull] * 187489ull +
		m_perm433[(index / 433ull) % 433ull] * 433ull +
		m_perm433[(index / 187489ull) % 433ull]) * float(0x1.fffffcp-1 / 81182737ull); // Results in [0,1).
}

inline float Halton_sampler::halton439(const unsigned long long index) const
{
	return (m_perm439[index % 439ull] * 192721ull +
		m_perm439[(index / 439ull) % 439ull] * 439ull +
		m_perm439[(index / 192721ull) % 439ull]) * float(0x1.fffffcp-1 / 84604519ull); // Results in [0,1).
}

inline float Halton_sampler::halton443(const unsigned long long index) const
{
	return (m_perm443[index % 443ull] * 196249ull +
		m_perm443[(index / 443ull) % 443ull] * 443ull +
		m_perm443[(index / 196249ull) % 443ull]) * float(0x1.fffffcp-1 / 86938307ull); // Results in [0,1).
}

inline float Halton_sampler::halton449(const unsigned long long index) const
{
	return (m_perm449[index % 449ull] * 201601ull +
		m_perm449[(index / 449ull) % 449ull] * 449ull +
		m_perm449[(index / 201601ull) % 449ull]) * float(0x1.fffffcp-1 / 90518849ull); // Results in [0,1).
}

inline float Halton_sampler::halton457(const unsigned long long index) const
{
	return (m_perm457[index % 457ull] * 208849ull +
		m_perm457[(index / 457ull) % 457ull] * 457ull +
		m_perm457[(index / 208849ull) % 457ull]) * float(0x1.fffffcp-1 / 95443993ull); // Results in [0,1).
}

inline float Halton_sampler::halton461(const unsigned long long index) const
{
	return (m_perm461[index % 461ull] * 212521ull +
		m_perm461[(index / 461ull) % 461ull] * 461ull +
		m_perm461[(index / 212521ull) % 461ull]) * float(0x1.fffffcp-1 / 97972181ull); // Results in [0,1).
}

inline float Halton_sampler::halton463(const unsigned long long index) const
{
	return (m_perm463[index % 463ull] * 214369ull +
		m_perm463[(index / 463ull) % 463ull] * 463ull +
		m_perm463[(index / 214369ull) % 463ull]) * float(0x1.fffffcp-1 / 99252847ull); // Results in [0,1).
}

inline float Halton_sampler::halton467(const unsigned long long index) const
{
	return (m_perm467[index % 467ull] * 218089ull +
		m_perm467[(index / 467ull) % 467ull] * 467ull +
		m_perm467[(index / 218089ull) % 467ull]) * float(0x1.fffffcp-1 / 101847563ull); // Results in [0,1).
}

inline float Halton_sampler::halton479(const unsigned long long index) const
{
	return (m_perm479[index % 479ull] * 229441ull +
		m_perm479[(index / 479ull) % 479ull] * 479ull +
		m_perm479[(index / 229441ull) % 479ull]) * float(0x1.fffffcp-1 / 109902239ull); // Results in [0,1).
}

inline float Halton_sampler::halton487(const unsigned long long index) const
{
	return (m_perm487[index % 487ull] * 237169ull +
		m_perm487[(index / 487ull) % 487ull] * 487ull +
		m_perm487[(index / 237169ull) % 487ull]) * float(0x1.fffffcp-1 / 115501303ull); // Results in [0,1).
}

inline float Halton_sampler::halton491(const unsigned long long index) const
{
	return (m_perm491[index % 491ull] * 241081ull +
		m_perm491[(index / 491ull) % 491ull] * 491ull +
		m_perm491[(index / 241081ull) % 491ull]) * float(0x1.fffffcp-1 / 118370771ull); // Results in [0,1).
}

inline float Halton_sampler::halton499(const unsigned long long index) const
{
	return (m_perm499[index % 499ull] * 249001ull +
		m_perm499[(index / 499ull) % 499ull] * 499ull +
		m_perm499[(index / 249001ull) % 499ull]) * float(0x1.fffffcp-1 / 124251499ull); // Results in [0,1).
}

inline float Halton_sampler::halton503(const unsigned long long index) const
{
	return (m_perm503[index % 503ull] * 253009ull +
		m_perm503[(index / 503ull) % 503ull] * 503ull +
		m_perm503[(index / 253009ull) % 503ull]) * float(0x1.fffffcp-1 / 127263527ull); // Results in [0,1).
}

inline float Halton_sampler::halton509(const unsigned long long index) const
{
	return (m_perm509[index % 509ull] * 259081ull +
		m_perm509[(index / 509ull) % 509ull] * 509ull +
		m_perm509[(index / 259081ull) % 509ull]) * float(0x1.fffffcp-1 / 131872229ull); // Results in [0,1).
}

inline float Halton_sampler::halton521(const unsigned long long index) const
{
	return (m_perm521[index % 521ull] * 271441ull +
		m_perm521[(index / 521ull) % 521ull] * 521ull +
		m_perm521[(index / 271441ull) % 521ull]) * float(0x1.fffffcp-1 / 141420761ull); // Results in [0,1).
}

inline float Halton_sampler::halton523(const unsigned long long index) const
{
	return (m_perm523[index % 523ull] * 273529ull +
		m_perm523[(index / 523ull) % 523ull] * 523ull +
		m_perm523[(index / 273529ull) % 523ull]) * float(0x1.fffffcp-1 / 143055667ull); // Results in [0,1).
}

inline float Halton_sampler::halton541(const unsigned long long index) const
{
	return (m_perm541[index % 541ull] * 292681ull +
		m_perm541[(index / 541ull) % 541ull] * 541ull +
		m_perm541[(index / 292681ull) % 541ull]) * float(0x1.fffffcp-1 / 158340421ull); // Results in [0,1).
}

inline float Halton_sampler::halton547(const unsigned long long index) const
{
	return (m_perm547[index % 547ull] * 299209ull +
		m_perm547[(index / 547ull) % 547ull] * 547ull +
		m_perm547[(index / 299209ull) % 547ull]) * float(0x1.fffffcp-1 / 163667323ull); // Results in [0,1).
}

inline float Halton_sampler::halton557(const unsigned long long index) const
{
	return (m_perm557[index % 557ull] * 310249ull +
		m_perm557[(index / 557ull) % 557ull] * 557ull +
		m_perm557[(index / 310249ull) % 557ull]) * float(0x1.fffffcp-1 / 172808693ull); // Results in [0,1).
}

inline float Halton_sampler::halton563(const unsigned long long index) const
{
	return (m_perm563[index % 563ull] * 316969ull +
		m_perm563[(index / 563ull) % 563ull] * 563ull +
		m_perm563[(index / 316969ull) % 563ull]) * float(0x1.fffffcp-1 / 178453547ull); // Results in [0,1).
}

inline float Halton_sampler::halton569(const unsigned long long index) const
{
	return (m_perm569[index % 569ull] * 323761ull +
		m_perm569[(index / 569ull) % 569ull] * 569ull +
		m_perm569[(index / 323761ull) % 569ull]) * float(0x1.fffffcp-1 / 184220009ull); // Results in [0,1).
}

inline float Halton_sampler::halton571(const unsigned long long index) const
{
	return (m_perm571[index % 571ull] * 326041ull +
		m_perm571[(index / 571ull) % 571ull] * 571ull +
		m_perm571[(index / 326041ull) % 571ull]) * float(0x1.fffffcp-1 / 186169411ull); // Results in [0,1).
}

inline float Halton_sampler::halton577(const unsigned long long index) const
{
	return (m_perm577[index % 577ull] * 332929ull +
		m_perm577[(index / 577ull) % 577ull] * 577ull +
		m_perm577[(index / 332929ull) % 577ull]) * float(0x1.fffffcp-1 / 192100033ull); // Results in [0,1).
}

inline float Halton_sampler::halton587(const unsigned long long index) const
{
	return (m_perm587[index % 587ull] * 344569ull +
		m_perm587[(index / 587ull) % 587ull] * 587ull +
		m_perm587[(index / 344569ull) % 587ull]) * float(0x1.fffffcp-1 / 202262003ull); // Results in [0,1).
}

inline float Halton_sampler::halton593(const unsigned long long index) const
{
	return (m_perm593[index % 593ull] * 351649ull +
		m_perm593[(index / 593ull) % 593ull] * 593ull +
		m_perm593[(index / 351649ull) % 593ull]) * float(0x1.fffffcp-1 / 208527857ull); // Results in [0,1).
}

inline float Halton_sampler::halton599(const unsigned long long index) const
{
	return (m_perm599[index % 599ull] * 358801ull +
		m_perm599[(index / 599ull) % 599ull] * 599ull +
		m_perm599[(index / 358801ull) % 599ull]) * float(0x1.fffffcp-1 / 214921799ull); // Results in [0,1).
}

inline float Halton_sampler::halton601(const unsigned long long index) const
{
	return (m_perm601[index % 601ull] * 361201ull +
		m_perm601[(index / 601ull) % 601ull] * 601ull +
		m_perm601[(index / 361201ull) % 601ull]) * float(0x1.fffffcp-1 / 217081801ull); // Results in [0,1).
}

inline float Halton_sampler::halton607(const unsigned long long index) const
{
	return (m_perm607[index % 607ull] * 368449ull +
		m_perm607[(index / 607ull) % 607ull] * 607ull +
		m_perm607[(index / 368449ull) % 607ull]) * float(0x1.fffffcp-1 / 223648543ull); // Results in [0,1).
}

inline float Halton_sampler::halton613(const unsigned long long index) const
{
	return (m_perm613[index % 613ull] * 375769ull +
		m_perm613[(index / 613ull) % 613ull] * 613ull +
		m_perm613[(index / 375769ull) % 613ull]) * float(0x1.fffffcp-1 / 230346397ull); // Results in [0,1).
}

inline float Halton_sampler::halton617(const unsigned long long index) const
{
	return (m_perm617[index % 617ull] * 380689ull +
		m_perm617[(index / 617ull) % 617ull] * 617ull +
		m_perm617[(index / 380689ull) % 617ull]) * float(0x1.fffffcp-1 / 234885113ull); // Results in [0,1).
}

inline float Halton_sampler::halton619(const unsigned long long index) const
{
	return (m_perm619[index % 619ull] * 383161ull +
		m_perm619[(index / 619ull) % 619ull] * 619ull +
		m_perm619[(index / 383161ull) % 619ull]) * float(0x1.fffffcp-1 / 237176659ull); // Results in [0,1).
}

inline float Halton_sampler::halton631(const unsigned long long index) const
{
	return (m_perm631[index % 631ull] * 398161ull +
		m_perm631[(index / 631ull) % 631ull] * 631ull +
		m_perm631[(index / 398161ull) % 631ull]) * float(0x1.fffffcp-1 / 251239591ull); // Results in [0,1).
}

inline float Halton_sampler::halton641(const unsigned long long index) const
{
	return (m_perm641[index % 641ull] * 410881ull +
		m_perm641[(index / 641ull) % 641ull] * 641ull +
		m_perm641[(index / 410881ull) % 641ull]) * float(0x1.fffffcp-1 / 263374721ull); // Results in [0,1).
}

inline float Halton_sampler::halton643(const unsigned long long index) const
{
	return (m_perm643[index % 643ull] * 413449ull +
		m_perm643[(index / 643ull) % 643ull] * 643ull +
		m_perm643[(index / 413449ull) % 643ull]) * float(0x1.fffffcp-1 / 265847707ull); // Results in [0,1).
}

inline float Halton_sampler::halton647(const unsigned long long index) const
{
	return (m_perm647[index % 647ull] * 418609ull +
		m_perm647[(index / 647ull) % 647ull] * 647ull +
		m_perm647[(index / 418609ull) % 647ull]) * float(0x1.fffffcp-1 / 270840023ull); // Results in [0,1).
}

inline float Halton_sampler::halton653(const unsigned long long index) const
{
	return (m_perm653[index % 653ull] * 426409ull +
		m_perm653[(index / 653ull) % 653ull] * 653ull +
		m_perm653[(index / 426409ull) % 653ull]) * float(0x1.fffffcp-1 / 278445077ull); // Results in [0,1).
}

inline float Halton_sampler::halton659(const unsigned long long index) const
{
	return (m_perm659[index % 659ull] * 434281ull +
		m_perm659[(index / 659ull) % 659ull] * 659ull +
		m_perm659[(index / 434281ull) % 659ull]) * float(0x1.fffffcp-1 / 286191179ull); // Results in [0,1).
}

inline float Halton_sampler::halton661(const unsigned long long index) const
{
	return (m_perm661[index % 661ull] * 436921ull +
		m_perm661[(index / 661ull) % 661ull] * 661ull +
		m_perm661[(index / 436921ull) % 661ull]) * float(0x1.fffffcp-1 / 288804781ull); // Results in [0,1).
}

inline float Halton_sampler::halton673(const unsigned long long index) const
{
	return (m_perm673[index % 673ull] * 452929ull +
		m_perm673[(index / 673ull) % 673ull] * 673ull +
		m_perm673[(index / 452929ull) % 673ull]) * float(0x1.fffffcp-1 / 304821217ull); // Results in [0,1).
}

inline float Halton_sampler::halton677(const unsigned long long index) const
{
	return (m_perm677[index % 677ull] * 458329ull +
		m_perm677[(index / 677ull) % 677ull] * 677ull +
		m_perm677[(index / 458329ull) % 677ull]) * float(0x1.fffffcp-1 / 310288733ull); // Results in [0,1).
}

inline float Halton_sampler::halton683(const unsigned long long index) const
{
	return (m_perm683[index % 683ull] * 466489ull +
		m_perm683[(index / 683ull) % 683ull] * 683ull +
		m_perm683[(index / 466489ull) % 683ull]) * float(0x1.fffffcp-1 / 318611987ull); // Results in [0,1).
}

inline float Halton_sampler::halton691(const unsigned long long index) const
{
	return (m_perm691[index % 691ull] * 477481ull +
		m_perm691[(index / 691ull) % 691ull] * 691ull +
		m_perm691[(index / 477481ull) % 691ull]) * float(0x1.fffffcp-1 / 329939371ull); // Results in [0,1).
}

inline float Halton_sampler::halton701(const unsigned long long index) const
{
	return (m_perm701[index % 701ull] * 491401ull +
		m_perm701[(index / 701ull) % 701ull] * 701ull +
		m_perm701[(index / 491401ull) % 701ull]) * float(0x1.fffffcp-1 / 344472101ull); // Results in [0,1).
}

inline float Halton_sampler::halton709(const unsigned long long index) const
{
	return (m_perm709[index % 709ull] * 502681ull +
		m_perm709[(index / 709ull) % 709ull] * 709ull +
		m_perm709[(index / 502681ull) % 709ull]) * float(0x1.fffffcp-1 / 356400829ull); // Results in [0,1).
}

inline float Halton_sampler::halton719(const unsigned long long index) const
{
	return (m_perm719[index % 719ull] * 516961ull +
		m_perm719[(index / 719ull) % 719ull] * 719ull +
		m_perm719[(index / 516961ull) % 719ull]) * float(0x1.fffffcp-1 / 371694959ull); // Results in [0,1).
}

inline float Halton_sampler::halton727(const unsigned long long index) const
{
	return (m_perm727[index % 727ull] * 528529ull +
		m_perm727[(index / 727ull) % 727ull] * 727ull +
		m_perm727[(index / 528529ull) % 727ull]) * float(0x1.fffffcp-1 / 384240583ull); // Results in [0,1).
}

inline float Halton_sampler::halton733(const unsigned long long index) const
{
	return (m_perm733[index % 733ull] * 537289ull +
		m_perm733[(index / 733ull) % 733ull] * 733ull +
		m_perm733[(index / 537289ull) % 733ull]) * float(0x1.fffffcp-1 / 393832837ull); // Results in [0,1).
}

inline float Halton_sampler::halton739(const unsigned long long index) const
{
	return (m_perm739[index % 739ull] * 546121ull +
		m_perm739[(index / 739ull) % 739ull] * 739ull +
		m_perm739[(index / 546121ull) % 739ull]) * float(0x1.fffffcp-1 / 403583419ull); // Results in [0,1).
}

inline float Halton_sampler::halton743(const unsigned long long index) const
{
	return (m_perm743[index % 743ull] * 552049ull +
		m_perm743[(index / 743ull) % 743ull] * 743ull +
		m_perm743[(index / 552049ull) % 743ull]) * float(0x1.fffffcp-1 / 410172407ull); // Results in [0,1).
}

inline float Halton_sampler::halton751(const unsigned long long index) const
{
	return (m_perm751[index % 751ull] * 564001ull +
		m_perm751[(index / 751ull) % 751ull] * 751ull +
		m_perm751[(index / 564001ull) % 751ull]) * float(0x1.fffffcp-1 / 423564751ull); // Results in [0,1).
}

inline float Halton_sampler::halton757(const unsigned long long index) const
{
	return (m_perm757[index % 757ull] * 573049ull +
		m_perm757[(index / 757ull) % 757ull] * 757ull +
		m_perm757[(index / 573049ull) % 757ull]) * float(0x1.fffffcp-1 / 433798093ull); // Results in [0,1).
}

inline float Halton_sampler::halton761(const unsigned long long index) const
{
	return (m_perm761[index % 761ull] * 579121ull +
		m_perm761[(index / 761ull) % 761ull] * 761ull +
		m_perm761[(index / 579121ull) % 761ull]) * float(0x1.fffffcp-1 / 440711081ull); // Results in [0,1).
}

inline float Halton_sampler::halton769(const unsigned long long index) const
{
	return (m_perm769[index % 769ull] * 591361ull +
		m_perm769[(index / 769ull) % 769ull] * 769ull +
		m_perm769[(index / 591361ull) % 769ull]) * float(0x1.fffffcp-1 / 454756609ull); // Results in [0,1).
}

inline float Halton_sampler::halton773(const unsigned long long index) const
{
	return (m_perm773[index % 773ull] * 597529ull +
		m_perm773[(index / 773ull) % 773ull] * 773ull +
		m_perm773[(index / 597529ull) % 773ull]) * float(0x1.fffffcp-1 / 461889917ull); // Results in [0,1).
}

inline float Halton_sampler::halton787(const unsigned long long index) const
{
	return (m_perm787[index % 787ull] * 619369ull +
		m_perm787[(index / 787ull) % 787ull] * 787ull +
		m_perm787[(index / 619369ull) % 787ull]) * float(0x1.fffffcp-1 / 487443403ull); // Results in [0,1).
}

inline float Halton_sampler::halton797(const unsigned long long index) const
{
	return (m_perm797[index % 797ull] * 635209ull +
		m_perm797[(index / 797ull) % 797ull] * 797ull +
		m_perm797[(index / 635209ull) % 797ull]) * float(0x1.fffffcp-1 / 506261573ull); // Results in [0,1).
}

inline float Halton_sampler::halton809(const unsigned long long index) const
{
	return (m_perm809[index % 809ull] * 654481ull +
		m_perm809[(index / 809ull) % 809ull] * 809ull +
		m_perm809[(index / 654481ull) % 809ull]) * float(0x1.fffffcp-1 / 529475129ull); // Results in [0,1).
}

inline float Halton_sampler::halton811(const unsigned long long index) const
{
	return (m_perm811[index % 811ull] * 657721ull +
		m_perm811[(index / 811ull) % 811ull] * 811ull +
		m_perm811[(index / 657721ull) % 811ull]) * float(0x1.fffffcp-1 / 533411731ull); // Results in [0,1).
}

inline float Halton_sampler::halton821(const unsigned long long index) const
{
	return (m_perm821[index % 821ull] * 674041ull +
		m_perm821[(index / 821ull) % 821ull] * 821ull +
		m_perm821[(index / 674041ull) % 821ull]) * float(0x1.fffffcp-1 / 553387661ull); // Results in [0,1).
}

inline float Halton_sampler::halton823(const unsigned long long index) const
{
	return (m_perm823[index % 823ull] * 677329ull +
		m_perm823[(index / 823ull) % 823ull] * 823ull +
		m_perm823[(index / 677329ull) % 823ull]) * float(0x1.fffffcp-1 / 557441767ull); // Results in [0,1).
}

inline float Halton_sampler::halton827(const unsigned long long index) const
{
	return (m_perm827[index % 827ull] * 683929ull +
		m_perm827[(index / 827ull) % 827ull] * 827ull +
		m_perm827[(index / 683929ull) % 827ull]) * float(0x1.fffffcp-1 / 565609283ull); // Results in [0,1).
}

inline float Halton_sampler::halton829(const unsigned long long index) const
{
	return (m_perm829[index % 829ull] * 687241ull +
		m_perm829[(index / 829ull) % 829ull] * 829ull +
		m_perm829[(index / 687241ull) % 829ull]) * float(0x1.fffffcp-1 / 569722789ull); // Results in [0,1).
}

inline float Halton_sampler::halton839(const unsigned long long index) const
{
	return (m_perm839[index % 839ull] * 703921ull +
		m_perm839[(index / 839ull) % 839ull] * 839ull +
		m_perm839[(index / 703921ull) % 839ull]) * float(0x1.fffffcp-1 / 590589719ull); // Results in [0,1).
}

inline float Halton_sampler::halton853(const unsigned long long index) const
{
	return (m_perm853[index % 853ull] * 727609ull +
		m_perm853[(index / 853ull) % 853ull] * 853ull +
		m_perm853[(index / 727609ull) % 853ull]) * float(0x1.fffffcp-1 / 620650477ull); // Results in [0,1).
}

inline float Halton_sampler::halton857(const unsigned long long index) const
{
	return (m_perm857[index % 857ull] * 734449ull +
		m_perm857[(index / 857ull) % 857ull] * 857ull +
		m_perm857[(index / 734449ull) % 857ull]) * float(0x1.fffffcp-1 / 629422793ull); // Results in [0,1).
}

inline float Halton_sampler::halton859(const unsigned long long index) const
{
	return (m_perm859[index % 859ull] * 737881ull +
		m_perm859[(index / 859ull) % 859ull] * 859ull +
		m_perm859[(index / 737881ull) % 859ull]) * float(0x1.fffffcp-1 / 633839779ull); // Results in [0,1).
}

inline float Halton_sampler::halton863(const unsigned long long index) const
{
	return (m_perm863[index % 863ull] * 744769ull +
		m_perm863[(index / 863ull) % 863ull] * 863ull +
		m_perm863[(index / 744769ull) % 863ull]) * float(0x1.fffffcp-1 / 642735647ull); // Results in [0,1).
}

inline float Halton_sampler::halton877(const unsigned long long index) const
{
	return (m_perm877[index % 877ull] * 769129ull +
		m_perm877[(index / 877ull) % 877ull] * 877ull +
		m_perm877[(index / 769129ull) % 877ull]) * float(0x1.fffffcp-1 / 674526133ull); // Results in [0,1).
}

inline float Halton_sampler::halton881(const unsigned long long index) const
{
	return (m_perm881[index % 881ull] * 776161ull +
		m_perm881[(index / 881ull) % 881ull] * 881ull +
		m_perm881[(index / 776161ull) % 881ull]) * float(0x1.fffffcp-1 / 683797841ull); // Results in [0,1).
}

inline float Halton_sampler::halton883(const unsigned long long index) const
{
	return (m_perm883[index % 883ull] * 779689ull +
		m_perm883[(index / 883ull) % 883ull] * 883ull +
		m_perm883[(index / 779689ull) % 883ull]) * float(0x1.fffffcp-1 / 688465387ull); // Results in [0,1).
}

inline float Halton_sampler::halton887(const unsigned long long index) const
{
	return (m_perm887[index % 887ull] * 786769ull +
		m_perm887[(index / 887ull) % 887ull] * 887ull +
		m_perm887[(index / 786769ull) % 887ull]) * float(0x1.fffffcp-1 / 697864103ull); // Results in [0,1).
}

inline float Halton_sampler::halton907(const unsigned long long index) const
{
	return (m_perm907[index % 907ull] * 822649ull +
		m_perm907[(index / 907ull) % 907ull] * 907ull +
		m_perm907[(index / 822649ull) % 907ull]) * float(0x1.fffffcp-1 / 746142643ull); // Results in [0,1).
}

inline float Halton_sampler::halton911(const unsigned long long index) const
{
	return (m_perm911[index % 911ull] * 829921ull +
		m_perm911[(index / 911ull) % 911ull] * 911ull +
		m_perm911[(index / 829921ull) % 911ull]) * float(0x1.fffffcp-1 / 756058031ull); // Results in [0,1).
}

inline float Halton_sampler::halton919(const unsigned long long index) const
{
	return (m_perm919[index % 919ull] * 844561ull +
		m_perm919[(index / 919ull) % 919ull] * 919ull +
		m_perm919[(index / 844561ull) % 919ull]) * float(0x1.fffffcp-1 / 776151559ull); // Results in [0,1).
}

inline float Halton_sampler::halton929(const unsigned long long index) const
{
	return (m_perm929[index % 929ull] * 863041ull +
		m_perm929[(index / 929ull) % 929ull] * 929ull +
		m_perm929[(index / 863041ull) % 929ull]) * float(0x1.fffffcp-1 / 801765089ull); // Results in [0,1).
}

inline float Halton_sampler::halton937(const unsigned long long index) const
{
	return (m_perm937[index % 937ull] * 877969ull +
		m_perm937[(index / 937ull) % 937ull] * 937ull +
		m_perm937[(index / 877969ull) % 937ull]) * float(0x1.fffffcp-1 / 822656953ull); // Results in [0,1).
}

inline float Halton_sampler::halton941(const unsigned long long index) const
{
	return (m_perm941[index % 941ull] * 885481ull +
		m_perm941[(index / 941ull) % 941ull] * 941ull +
		m_perm941[(index / 885481ull) % 941ull]) * float(0x1.fffffcp-1 / 833237621ull); // Results in [0,1).
}

inline float Halton_sampler::halton947(const unsigned long long index) const
{
	return (m_perm947[index % 947ull] * 896809ull +
		m_perm947[(index / 947ull) % 947ull] * 947ull +
		m_perm947[(index / 896809ull) % 947ull]) * float(0x1.fffffcp-1 / 849278123ull); // Results in [0,1).
}

inline float Halton_sampler::halton953(const unsigned long long index) const
{
	return (m_perm953[index % 953ull] * 908209ull +
		m_perm953[(index / 953ull) % 953ull] * 953ull +
		m_perm953[(index / 908209ull) % 953ull]) * float(0x1.fffffcp-1 / 865523177ull); // Results in [0,1).
}

inline float Halton_sampler::halton967(const unsigned long long index) const
{
	return (m_perm967[index % 967ull] * 935089ull +
		m_perm967[(index / 967ull) % 967ull] * 967ull +
		m_perm967[(index / 935089ull) % 967ull]) * float(0x1.fffffcp-1 / 904231063ull); // Results in [0,1).
}

inline float Halton_sampler::halton971(const unsigned long long index) const
{
	return (m_perm971[index % 971ull] * 942841ull +
		m_perm971[(index / 971ull) % 971ull] * 971ull +
		m_perm971[(index / 942841ull) % 971ull]) * float(0x1.fffffcp-1 / 915498611ull); // Results in [0,1).
}

inline float Halton_sampler::halton977(const unsigned long long index) const
{
	return (m_perm977[index % 977ull] * 954529ull +
		m_perm977[(index / 977ull) % 977ull] * 977ull +
		m_perm977[(index / 954529ull) % 977ull]) * float(0x1.fffffcp-1 / 932574833ull); // Results in [0,1).
}

inline float Halton_sampler::halton983(const unsigned long long index) const
{
	return (m_perm983[index % 983ull] * 966289ull +
		m_perm983[(index / 983ull) % 983ull] * 983ull +
		m_perm983[(index / 966289ull) % 983ull]) * float(0x1.fffffcp-1 / 949862087ull); // Results in [0,1).
}

inline float Halton_sampler::halton991(const unsigned long long index) const
{
	return (m_perm991[index % 991ull] * 982081ull +
		m_perm991[(index / 991ull) % 991ull] * 991ull +
		m_perm991[(index / 982081ull) % 991ull]) * float(0x1.fffffcp-1 / 973242271ull); // Results in [0,1).
}

inline float Halton_sampler::halton997(const unsigned long long index) const
{
	return (m_perm997[index % 997ull] * 994009ull +
		m_perm997[(index / 997ull) % 997ull] * 997ull +
		m_perm997[(index / 994009ull) % 997ull]) * float(0x1.fffffcp-1 / 991026973ull); // Results in [0,1).
}

inline float Halton_sampler::halton1009(const unsigned long long index) const
{
	return (m_perm1009[index % 1009ull] * 1018081ull +
		m_perm1009[(index / 1009ull) % 1009ull] * 1009ull +
		m_perm1009[(index / 1018081ull) % 1009ull]) * float(0x1.fffffcp-1 / 1027243729ull); // Results in [0,1).
}

inline float Halton_sampler::halton1013(const unsigned long long index) const
{
	return (m_perm1013[index % 1013ull] * 1026169ull +
		m_perm1013[(index / 1013ull) % 1013ull] * 1013ull +
		m_perm1013[(index / 1026169ull) % 1013ull]) * float(0x1.fffffcp-1 / 1039509197ull); // Results in [0,1).
}

inline float Halton_sampler::halton1019(const unsigned long long index) const
{
	return (m_perm1019[index % 1019ull] * 1038361ull +
		m_perm1019[(index / 1019ull) % 1019ull] * 1019ull +
		m_perm1019[(index / 1038361ull) % 1019ull]) * float(0x1.fffffcp-1 / 1058089859ull); // Results in [0,1).
}

inline float Halton_sampler::halton1021(const unsigned long long index) const
{
	return (m_perm1021[index % 1021ull] * 1042441ull +
		m_perm1021[(index / 1021ull) % 1021ull] * 1021ull +
		m_perm1021[(index / 1042441ull) % 1021ull]) * float(0x1.fffffcp-1 / 1064332261ull); // Results in [0,1).
}

inline float Halton_sampler::halton1031(const unsigned long long index) const
{
	return (m_perm1031[index % 1031ull] * 1062961ull +
		m_perm1031[(index / 1031ull) % 1031ull] * 1031ull +
		m_perm1031[(index / 1062961ull) % 1031ull]) * float(0x1.fffffcp-1 / 1095912791ull); // Results in [0,1).
}

inline float Halton_sampler::halton1033(const unsigned long long index) const
{
	return (m_perm1033[index % 1033ull] * 1067089ull +
		m_perm1033[(index / 1033ull) % 1033ull] * 1033ull +
		m_perm1033[(index / 1067089ull) % 1033ull]) * float(0x1.fffffcp-1 / 1102302937ull); // Results in [0,1).
}

inline float Halton_sampler::halton1039(const unsigned long long index) const
{
	return (m_perm1039[index % 1039ull] * 1079521ull +
		m_perm1039[(index / 1039ull) % 1039ull] * 1039ull +
		m_perm1039[(index / 1079521ull) % 1039ull]) * float(0x1.fffffcp-1 / 1121622319ull); // Results in [0,1).
}

inline float Halton_sampler::halton1049(const unsigned long long index) const
{
	return (m_perm1049[index % 1049ull] * 1100401ull +
		m_perm1049[(index / 1049ull) % 1049ull] * 1049ull +
		m_perm1049[(index / 1100401ull) % 1049ull]) * float(0x1.fffffcp-1 / 1154320649ull); // Results in [0,1).
}

inline float Halton_sampler::halton1051(const unsigned long long index) const
{
	return (m_perm1051[index % 1051ull] * 1104601ull +
		m_perm1051[(index / 1051ull) % 1051ull] * 1051ull +
		m_perm1051[(index / 1104601ull) % 1051ull]) * float(0x1.fffffcp-1 / 1160935651ull); // Results in [0,1).
}

inline float Halton_sampler::halton1061(const unsigned long long index) const
{
	return (m_perm1061[index % 1061ull] * 1125721ull +
		m_perm1061[(index / 1061ull) % 1061ull] * 1061ull +
		m_perm1061[(index / 1125721ull) % 1061ull]) * float(0x1.fffffcp-1 / 1194389981ull); // Results in [0,1).
}

inline float Halton_sampler::halton1063(const unsigned long long index) const
{
	return (m_perm1063[index % 1063ull] * 1129969ull +
		m_perm1063[(index / 1063ull) % 1063ull] * 1063ull +
		m_perm1063[(index / 1129969ull) % 1063ull]) * float(0x1.fffffcp-1 / 1201157047ull); // Results in [0,1).
}

inline float Halton_sampler::halton1069(const unsigned long long index) const
{
	return (m_perm1069[index % 1069ull] * 1142761ull +
		m_perm1069[(index / 1069ull) % 1069ull] * 1069ull +
		m_perm1069[(index / 1142761ull) % 1069ull]) * float(0x1.fffffcp-1 / 1221611509ull); // Results in [0,1).
}

inline float Halton_sampler::halton1087(const unsigned long long index) const
{
	return (m_perm1087[index % 1087ull] * 1181569ull +
		m_perm1087[(index / 1087ull) % 1087ull] * 1087ull +
		m_perm1087[(index / 1181569ull) % 1087ull]) * float(0x1.fffffcp-1 / 1284365503ull); // Results in [0,1).
}

inline float Halton_sampler::halton1091(const unsigned long long index) const
{
	return (m_perm1091[index % 1091ull] * 1190281ull +
		m_perm1091[(index / 1091ull) % 1091ull] * 1091ull +
		m_perm1091[(index / 1190281ull) % 1091ull]) * float(0x1.fffffcp-1 / 1298596571ull); // Results in [0,1).
}

inline float Halton_sampler::halton1093(const unsigned long long index) const
{
	return (m_perm1093[index % 1093ull] * 1194649ull +
		m_perm1093[(index / 1093ull) % 1093ull] * 1093ull +
		m_perm1093[(index / 1194649ull) % 1093ull]) * float(0x1.fffffcp-1 / 1305751357ull); // Results in [0,1).
}

inline float Halton_sampler::halton1097(const unsigned long long index) const
{
	return (m_perm1097[index % 1097ull] * 1203409ull +
		m_perm1097[(index / 1097ull) % 1097ull] * 1097ull +
		m_perm1097[(index / 1203409ull) % 1097ull]) * float(0x1.fffffcp-1 / 1320139673ull); // Results in [0,1).
}

inline float Halton_sampler::halton1103(const unsigned long long index) const
{
	return (m_perm1103[index % 1103ull] * 1216609ull +
		m_perm1103[(index / 1103ull) % 1103ull] * 1103ull +
		m_perm1103[(index / 1216609ull) % 1103ull]) * float(0x1.fffffcp-1 / 1341919727ull); // Results in [0,1).
}

inline float Halton_sampler::halton1109(const unsigned long long index) const
{
	return (m_perm1109[index % 1109ull] * 1229881ull +
		m_perm1109[(index / 1109ull) % 1109ull] * 1109ull +
		m_perm1109[(index / 1229881ull) % 1109ull]) * float(0x1.fffffcp-1 / 1363938029ull); // Results in [0,1).
}

inline float Halton_sampler::halton1117(const unsigned long long index) const
{
	return (m_perm1117[index % 1117ull] * 1247689ull +
		m_perm1117[(index / 1117ull) % 1117ull] * 1117ull +
		m_perm1117[(index / 1247689ull) % 1117ull]) * float(0x1.fffffcp-1 / 1393668613ull); // Results in [0,1).
}

inline float Halton_sampler::halton1123(const unsigned long long index) const
{
	return (m_perm1123[index % 1123ull] * 1261129ull +
		m_perm1123[(index / 1123ull) % 1123ull] * 1123ull +
		m_perm1123[(index / 1261129ull) % 1123ull]) * float(0x1.fffffcp-1 / 1416247867ull); // Results in [0,1).
}

inline float Halton_sampler::halton1129(const unsigned long long index) const
{
	return (m_perm1129[index % 1129ull] * 1274641ull +
		m_perm1129[(index / 1129ull) % 1129ull] * 1129ull +
		m_perm1129[(index / 1274641ull) % 1129ull]) * float(0x1.fffffcp-1 / 1439069689ull); // Results in [0,1).
}

inline float Halton_sampler::halton1151(const unsigned long long index) const
{
	return (m_perm1151[index % 1151ull] * 1324801ull +
		m_perm1151[(index / 1151ull) % 1151ull] * 1151ull +
		m_perm1151[(index / 1324801ull) % 1151ull]) * float(0x1.fffffcp-1 / 1524845951ull); // Results in [0,1).
}

inline float Halton_sampler::halton1153(const unsigned long long index) const
{
	return (m_perm1153[index % 1153ull] * 1329409ull +
		m_perm1153[(index / 1153ull) % 1153ull] * 1153ull +
		m_perm1153[(index / 1329409ull) % 1153ull]) * float(0x1.fffffcp-1 / 1532808577ull); // Results in [0,1).
}

inline float Halton_sampler::halton1163(const unsigned long long index) const
{
	return (m_perm1163[index % 1163ull] * 1352569ull +
		m_perm1163[(index / 1163ull) % 1163ull] * 1163ull +
		m_perm1163[(index / 1352569ull) % 1163ull]) * float(0x1.fffffcp-1 / 1573037747ull); // Results in [0,1).
}

inline float Halton_sampler::halton1171(const unsigned long long index) const
{
	return (m_perm1171[index % 1171ull] * 1371241ull +
		m_perm1171[(index / 1171ull) % 1171ull] * 1171ull +
		m_perm1171[(index / 1371241ull) % 1171ull]) * float(0x1.fffffcp-1 / 1605723211ull); // Results in [0,1).
}

inline float Halton_sampler::halton1181(const unsigned long long index) const
{
	return (m_perm1181[index % 1181ull] * 1394761ull +
		m_perm1181[(index / 1181ull) % 1181ull] * 1181ull +
		m_perm1181[(index / 1394761ull) % 1181ull]) * float(0x1.fffffcp-1 / 1647212741ull); // Results in [0,1).
}

inline float Halton_sampler::halton1187(const unsigned long long index) const
{
	return (m_perm1187[index % 1187ull] * 1408969ull +
		m_perm1187[(index / 1187ull) % 1187ull] * 1187ull +
		m_perm1187[(index / 1408969ull) % 1187ull]) * float(0x1.fffffcp-1 / 1672446203ull); // Results in [0,1).
}

inline float Halton_sampler::halton1193(const unsigned long long index) const
{
	return (m_perm1193[index % 1193ull] * 1423249ull +
		m_perm1193[(index / 1193ull) % 1193ull] * 1193ull +
		m_perm1193[(index / 1423249ull) % 1193ull]) * float(0x1.fffffcp-1 / 1697936057ull); // Results in [0,1).
}

inline float Halton_sampler::halton1201(const unsigned long long index) const
{
	return (m_perm1201[index % 1201ull] * 1442401ull +
		m_perm1201[(index / 1201ull) % 1201ull] * 1201ull +
		m_perm1201[(index / 1442401ull) % 1201ull]) * float(0x1.fffffcp-1 / 1732323601ull); // Results in [0,1).
}

inline float Halton_sampler::halton1213(const unsigned long long index) const
{
	return (m_perm1213[index % 1213ull] * 1471369ull +
		m_perm1213[(index / 1213ull) % 1213ull] * 1213ull +
		m_perm1213[(index / 1471369ull) % 1213ull]) * float(0x1.fffffcp-1 / 1784770597ull); // Results in [0,1).
}

inline float Halton_sampler::halton1217(const unsigned long long index) const
{
	return (m_perm1217[index % 1217ull] * 1481089ull +
		m_perm1217[(index / 1217ull) % 1217ull] * 1217ull +
		m_perm1217[(index / 1481089ull) % 1217ull]) * float(0x1.fffffcp-1 / 1802485313ull); // Results in [0,1).
}

inline float Halton_sampler::halton1223(const unsigned long long index) const
{
	return (m_perm1223[index % 1223ull] * 1495729ull +
		m_perm1223[(index / 1223ull) % 1223ull] * 1223ull +
		m_perm1223[(index / 1495729ull) % 1223ull]) * float(0x1.fffffcp-1 / 1829276567ull); // Results in [0,1).
}

inline float Halton_sampler::halton1229(const unsigned long long index) const
{
	return (m_perm1229[index % 1229ull] * 1510441ull +
		m_perm1229[(index / 1229ull) % 1229ull] * 1229ull +
		m_perm1229[(index / 1510441ull) % 1229ull]) * float(0x1.fffffcp-1 / 1856331989ull); // Results in [0,1).
}

inline float Halton_sampler::halton1231(const unsigned long long index) const
{
	return (m_perm1231[index % 1231ull] * 1515361ull +
		m_perm1231[(index / 1231ull) % 1231ull] * 1231ull +
		m_perm1231[(index / 1515361ull) % 1231ull]) * float(0x1.fffffcp-1 / 1865409391ull); // Results in [0,1).
}

inline float Halton_sampler::halton1237(const unsigned long long index) const
{
	return (m_perm1237[index % 1237ull] * 1530169ull +
		m_perm1237[(index / 1237ull) % 1237ull] * 1237ull +
		m_perm1237[(index / 1530169ull) % 1237ull]) * float(0x1.fffffcp-1 / 1892819053ull); // Results in [0,1).
}

inline float Halton_sampler::halton1249(const unsigned long long index) const
{
	return (m_perm1249[index % 1249ull] * 1560001ull +
		m_perm1249[(index / 1249ull) % 1249ull] * 1249ull +
		m_perm1249[(index / 1560001ull) % 1249ull]) * float(0x1.fffffcp-1 / 1948441249ull); // Results in [0,1).
}

inline float Halton_sampler::halton1259(const unsigned long long index) const
{
	return (m_perm1259[index % 1259ull] * 1585081ull +
		m_perm1259[(index / 1259ull) % 1259ull] * 1259ull +
		m_perm1259[(index / 1585081ull) % 1259ull]) * float(0x1.fffffcp-1 / 1995616979ull); // Results in [0,1).
}

inline float Halton_sampler::halton1277(const unsigned long long index) const
{
	return (m_perm1277[index % 1277ull] * 1630729ull +
		m_perm1277[(index / 1277ull) % 1277ull] * 1277ull +
		m_perm1277[(index / 1630729ull) % 1277ull]) * float(0x1.fffffcp-1 / 2082440933ull); // Results in [0,1).
}

inline float Halton_sampler::halton1279(const unsigned long long index) const
{
	return (m_perm1279[index % 1279ull] * 1635841ull +
		m_perm1279[(index / 1279ull) % 1279ull] * 1279ull +
		m_perm1279[(index / 1635841ull) % 1279ull]) * float(0x1.fffffcp-1 / 2092240639ull); // Results in [0,1).
}

inline float Halton_sampler::halton1283(const unsigned long long index) const
{
	return (m_perm1283[index % 1283ull] * 1646089ull +
		m_perm1283[(index / 1283ull) % 1283ull] * 1283ull +
		m_perm1283[(index / 1646089ull) % 1283ull]) * float(0x1.fffffcp-1 / 2111932187ull); // Results in [0,1).
}

inline float Halton_sampler::halton1289(const unsigned long long index) const
{
	return (m_perm1289[index % 1289ull] * 1661521ull +
		m_perm1289[(index / 1289ull) % 1289ull] * 1289ull +
		m_perm1289[(index / 1661521ull) % 1289ull]) * float(0x1.fffffcp-1 / 2141700569ull); // Results in [0,1).
}

inline float Halton_sampler::halton1291(const unsigned long long index) const
{
	return (m_perm1291[index % 1291ull] * 1666681ull +
		m_perm1291[(index / 1291ull) % 1291ull] * 1291ull +
		m_perm1291[(index / 1666681ull) % 1291ull]) * float(0x1.fffffcp-1 / 2151685171ull); // Results in [0,1).
}

inline float Halton_sampler::halton1297(const unsigned long long index) const
{
	return (m_perm1297[index % 1297ull] * 1682209ull +
		m_perm1297[(index / 1297ull) % 1297ull] * 1297ull +
		m_perm1297[(index / 1682209ull) % 1297ull]) * float(0x1.fffffcp-1 / 2181825073ull); // Results in [0,1).
}

inline float Halton_sampler::halton1301(const unsigned long long index) const
{
	return (m_perm1301[index % 1301ull] * 1692601ull +
		m_perm1301[(index / 1301ull) % 1301ull] * 1301ull +
		m_perm1301[(index / 1692601ull) % 1301ull]) * float(0x1.fffffcp-1 / 2202073901ull); // Results in [0,1).
}

inline float Halton_sampler::halton1303(const unsigned long long index) const
{
	return (m_perm1303[index % 1303ull] * 1697809ull +
		m_perm1303[(index / 1303ull) % 1303ull] * 1303ull +
		m_perm1303[(index / 1697809ull) % 1303ull]) * float(0x1.fffffcp-1 / 2212245127ull); // Results in [0,1).
}

inline float Halton_sampler::halton1307(const unsigned long long index) const
{
	return (m_perm1307[index % 1307ull] * 1708249ull +
		m_perm1307[(index / 1307ull) % 1307ull] * 1307ull +
		m_perm1307[(index / 1708249ull) % 1307ull]) * float(0x1.fffffcp-1 / 2232681443ull); // Results in [0,1).
}

inline float Halton_sampler::halton1319(const unsigned long long index) const
{
	return (m_perm1319[index % 1319ull] * 1739761ull +
		m_perm1319[(index / 1319ull) % 1319ull] * 1319ull +
		m_perm1319[(index / 1739761ull) % 1319ull]) * float(0x1.fffffcp-1 / 2294744759ull); // Results in [0,1).
}

inline float Halton_sampler::halton1321(const unsigned long long index) const
{
	return (m_perm1321[index % 1321ull] * 1745041ull +
		m_perm1321[(index / 1321ull) % 1321ull] * 1321ull +
		m_perm1321[(index / 1745041ull) % 1321ull]) * float(0x1.fffffcp-1 / 2305199161ull); // Results in [0,1).
}

inline float Halton_sampler::halton1327(const unsigned long long index) const
{
	return (m_perm1327[index % 1327ull] * 1760929ull +
		m_perm1327[(index / 1327ull) % 1327ull] * 1327ull +
		m_perm1327[(index / 1760929ull) % 1327ull]) * float(0x1.fffffcp-1 / 2336752783ull); // Results in [0,1).
}

inline float Halton_sampler::halton1361(const unsigned long long index) const
{
	return (m_perm1361[index % 1361ull] * 1852321ull +
		m_perm1361[(index / 1361ull) % 1361ull] * 1361ull +
		m_perm1361[(index / 1852321ull) % 1361ull]) * float(0x1.fffffcp-1 / 2521008881ull); // Results in [0,1).
}

inline float Halton_sampler::halton1367(const unsigned long long index) const
{
	return (m_perm1367[index % 1367ull] * 1868689ull +
		m_perm1367[(index / 1367ull) % 1367ull] * 1367ull +
		m_perm1367[(index / 1868689ull) % 1367ull]) * float(0x1.fffffcp-1 / 2554497863ull); // Results in [0,1).
}

inline float Halton_sampler::halton1373(const unsigned long long index) const
{
	return (m_perm1373[index % 1373ull] * 1885129ull +
		m_perm1373[(index / 1373ull) % 1373ull] * 1373ull +
		m_perm1373[(index / 1885129ull) % 1373ull]) * float(0x1.fffffcp-1 / 2588282117ull); // Results in [0,1).
}

inline float Halton_sampler::halton1381(const unsigned long long index) const
{
	return (m_perm1381[index % 1381ull] * 1907161ull +
		m_perm1381[(index / 1381ull) % 1381ull] * 1381ull +
		m_perm1381[(index / 1907161ull) % 1381ull]) * float(0x1.fffffcp-1 / 2633789341ull); // Results in [0,1).
}

inline float Halton_sampler::halton1399(const unsigned long long index) const
{
	return (m_perm1399[index % 1399ull] * 1957201ull +
		m_perm1399[(index / 1399ull) % 1399ull] * 1399ull +
		m_perm1399[(index / 1957201ull) % 1399ull]) * float(0x1.fffffcp-1 / 2738124199ull); // Results in [0,1).
}

inline float Halton_sampler::halton1409(const unsigned long long index) const
{
	return (m_perm1409[index % 1409ull] * 1985281ull +
		m_perm1409[(index / 1409ull) % 1409ull] * 1409ull +
		m_perm1409[(index / 1985281ull) % 1409ull]) * float(0x1.fffffcp-1 / 2797260929ull); // Results in [0,1).
}

inline float Halton_sampler::halton1423(const unsigned long long index) const
{
	return (m_perm1423[index % 1423ull] * 2024929ull +
		m_perm1423[(index / 1423ull) % 1423ull] * 1423ull +
		m_perm1423[(index / 2024929ull) % 1423ull]) * float(0x1.fffffcp-1 / 2881473967ull); // Results in [0,1).
}

inline float Halton_sampler::halton1427(const unsigned long long index) const
{
	return (m_perm1427[index % 1427ull] * 2036329ull +
		m_perm1427[(index / 1427ull) % 1427ull] * 1427ull +
		m_perm1427[(index / 2036329ull) % 1427ull]) * float(0x1.fffffcp-1 / 2905841483ull); // Results in [0,1).
}

inline float Halton_sampler::halton1429(const unsigned long long index) const
{
	return (m_perm1429[index % 1429ull] * 2042041ull +
		m_perm1429[(index / 1429ull) % 1429ull] * 1429ull +
		m_perm1429[(index / 2042041ull) % 1429ull]) * float(0x1.fffffcp-1 / 2918076589ull); // Results in [0,1).
}

inline float Halton_sampler::halton1433(const unsigned long long index) const
{
	return (m_perm1433[index % 1433ull] * 2053489ull +
		m_perm1433[(index / 1433ull) % 1433ull] * 1433ull +
		m_perm1433[(index / 2053489ull) % 1433ull]) * float(0x1.fffffcp-1 / 2942649737ull); // Results in [0,1).
}

inline float Halton_sampler::halton1439(const unsigned long long index) const
{
	return (m_perm1439[index % 1439ull] * 2070721ull +
		m_perm1439[(index / 1439ull) % 1439ull] * 1439ull +
		m_perm1439[(index / 2070721ull) % 1439ull]) * float(0x1.fffffcp-1 / 2979767519ull); // Results in [0,1).
}

inline float Halton_sampler::halton1447(const unsigned long long index) const
{
	return (m_perm1447[index % 1447ull] * 2093809ull +
		m_perm1447[(index / 1447ull) % 1447ull] * 1447ull +
		m_perm1447[(index / 2093809ull) % 1447ull]) * float(0x1.fffffcp-1 / 3029741623ull); // Results in [0,1).
}

inline float Halton_sampler::halton1451(const unsigned long long index) const
{
	return (m_perm1451[index % 1451ull] * 2105401ull +
		m_perm1451[(index / 1451ull) % 1451ull] * 1451ull +
		m_perm1451[(index / 2105401ull) % 1451ull]) * float(0x1.fffffcp-1 / 3054936851ull); // Results in [0,1).
}

inline float Halton_sampler::halton1453(const unsigned long long index) const
{
	return (m_perm1453[index % 1453ull] * 2111209ull +
		m_perm1453[(index / 1453ull) % 1453ull] * 1453ull +
		m_perm1453[(index / 2111209ull) % 1453ull]) * float(0x1.fffffcp-1 / 3067586677ull); // Results in [0,1).
}

inline float Halton_sampler::halton1459(const unsigned long long index) const
{
	return (m_perm1459[index % 1459ull] * 2128681ull +
		m_perm1459[(index / 1459ull) % 1459ull] * 1459ull +
		m_perm1459[(index / 2128681ull) % 1459ull]) * float(0x1.fffffcp-1 / 3105745579ull); // Results in [0,1).
}

inline float Halton_sampler::halton1471(const unsigned long long index) const
{
	return (m_perm1471[index % 1471ull] * 2163841ull +
		m_perm1471[(index / 1471ull) % 1471ull] * 1471ull +
		m_perm1471[(index / 2163841ull) % 1471ull]) * float(0x1.fffffcp-1 / 3183010111ull); // Results in [0,1).
}

inline float Halton_sampler::halton1481(const unsigned long long index) const
{
	return (m_perm1481[index % 1481ull] * 2193361ull +
		m_perm1481[(index / 1481ull) % 1481ull] * 1481ull +
		m_perm1481[(index / 2193361ull) % 1481ull]) * float(0x1.fffffcp-1 / 3248367641ull); // Results in [0,1).
}

inline float Halton_sampler::halton1483(const unsigned long long index) const
{
	return (m_perm1483[index % 1483ull] * 2199289ull +
		m_perm1483[(index / 1483ull) % 1483ull] * 1483ull +
		m_perm1483[(index / 2199289ull) % 1483ull]) * float(0x1.fffffcp-1 / 3261545587ull); // Results in [0,1).
}

inline float Halton_sampler::halton1487(const unsigned long long index) const
{
	return (m_perm1487[index % 1487ull] * 2211169ull +
		m_perm1487[(index / 1487ull) % 1487ull] * 1487ull +
		m_perm1487[(index / 2211169ull) % 1487ull]) * float(0x1.fffffcp-1 / 3288008303ull); // Results in [0,1).
}

inline float Halton_sampler::halton1489(const unsigned long long index) const
{
	return (m_perm1489[index % 1489ull] * 2217121ull +
		m_perm1489[(index / 1489ull) % 1489ull] * 1489ull +
		m_perm1489[(index / 2217121ull) % 1489ull]) * float(0x1.fffffcp-1 / 3301293169ull); // Results in [0,1).
}

inline float Halton_sampler::halton1493(const unsigned long long index) const
{
	return (m_perm1493[index % 1493ull] * 2229049ull +
		m_perm1493[(index / 1493ull) % 1493ull] * 1493ull +
		m_perm1493[(index / 2229049ull) % 1493ull]) * float(0x1.fffffcp-1 / 3327970157ull); // Results in [0,1).
}

inline float Halton_sampler::halton1499(const unsigned long long index) const
{
	return (m_perm1499[index % 1499ull] * 2247001ull +
		m_perm1499[(index / 1499ull) % 1499ull] * 1499ull +
		m_perm1499[(index / 2247001ull) % 1499ull]) * float(0x1.fffffcp-1 / 3368254499ull); // Results in [0,1).
}

inline float Halton_sampler::halton1511(const unsigned long long index) const
{
	return (m_perm1511[index % 1511ull] * 2283121ull +
		m_perm1511[(index / 1511ull) % 1511ull] * 1511ull +
		m_perm1511[(index / 2283121ull) % 1511ull]) * float(0x1.fffffcp-1 / 3449795831ull); // Results in [0,1).
}

inline float Halton_sampler::halton1523(const unsigned long long index) const
{
	return (m_perm1523[index % 1523ull] * 2319529ull +
		m_perm1523[(index / 1523ull) % 1523ull] * 1523ull +
		m_perm1523[(index / 2319529ull) % 1523ull]) * float(0x1.fffffcp-1 / 3532642667ull); // Results in [0,1).
}

inline float Halton_sampler::halton1531(const unsigned long long index) const
{
	return (m_perm1531[index % 1531ull] * 2343961ull +
		m_perm1531[(index / 1531ull) % 1531ull] * 1531ull +
		m_perm1531[(index / 2343961ull) % 1531ull]) * float(0x1.fffffcp-1 / 3588604291ull); // Results in [0,1).
}

inline float Halton_sampler::halton1543(const unsigned long long index) const
{
	return (m_perm1543[index % 1543ull] * 2380849ull +
		m_perm1543[(index / 1543ull) % 1543ull] * 1543ull +
		m_perm1543[(index / 2380849ull) % 1543ull]) * float(0x1.fffffcp-1 / 3673650007ull); // Results in [0,1).
}

inline float Halton_sampler::halton1549(const unsigned long long index) const
{
	return (m_perm1549[index % 1549ull] * 2399401ull +
		m_perm1549[(index / 1549ull) % 1549ull] * 1549ull +
		m_perm1549[(index / 2399401ull) % 1549ull]) * float(0x1.fffffcp-1 / 3716672149ull); // Results in [0,1).
}

inline float Halton_sampler::halton1553(const unsigned long long index) const
{
	return (m_perm1553[index % 1553ull] * 2411809ull +
		m_perm1553[(index / 1553ull) % 1553ull] * 1553ull +
		m_perm1553[(index / 2411809ull) % 1553ull]) * float(0x1.fffffcp-1 / 3745539377ull); // Results in [0,1).
}

inline float Halton_sampler::halton1559(const unsigned long long index) const
{
	return (m_perm1559[index % 1559ull] * 2430481ull +
		m_perm1559[(index / 1559ull) % 1559ull] * 1559ull +
		m_perm1559[(index / 2430481ull) % 1559ull]) * float(0x1.fffffcp-1 / 3789119879ull); // Results in [0,1).
}

inline float Halton_sampler::halton1567(const unsigned long long index) const
{
	return (m_perm1567[index % 1567ull] * 2455489ull +
		m_perm1567[(index / 1567ull) % 1567ull] * 1567ull +
		m_perm1567[(index / 2455489ull) % 1567ull]) * float(0x1.fffffcp-1 / 3847751263ull); // Results in [0,1).
}

inline float Halton_sampler::halton1571(const unsigned long long index) const
{
	return (m_perm1571[index % 1571ull] * 2468041ull +
		m_perm1571[(index / 1571ull) % 1571ull] * 1571ull +
		m_perm1571[(index / 2468041ull) % 1571ull]) * float(0x1.fffffcp-1 / 3877292411ull); // Results in [0,1).
}

inline float Halton_sampler::halton1579(const unsigned long long index) const
{
	return (m_perm1579[index % 1579ull] * 2493241ull +
		m_perm1579[(index / 1579ull) % 1579ull] * 1579ull +
		m_perm1579[(index / 2493241ull) % 1579ull]) * float(0x1.fffffcp-1 / 3936827539ull); // Results in [0,1).
}

inline float Halton_sampler::halton1583(const unsigned long long index) const
{
	return (m_perm1583[index % 1583ull] * 2505889ull +
		m_perm1583[(index / 1583ull) % 1583ull] * 1583ull +
		m_perm1583[(index / 2505889ull) % 1583ull]) * float(0x1.fffffcp-1 / 3966822287ull); // Results in [0,1).
}

inline float Halton_sampler::halton1597(const unsigned long long index) const
{
	return (m_perm1597[index % 1597ull] * 2550409ull +
		m_perm1597[(index / 1597ull) % 1597ull] * 1597ull +
		m_perm1597[(index / 2550409ull) % 1597ull]) * float(0x1.fffffcp-1 / 4073003173ull); // Results in [0,1).
}

inline float Halton_sampler::halton1601(const unsigned long long index) const
{
	return (m_perm1601[index % 1601ull] * 2563201ull +
		m_perm1601[(index / 1601ull) % 1601ull] * 1601ull +
		m_perm1601[(index / 2563201ull) % 1601ull]) * float(0x1.fffffcp-1 / 4103684801ull); // Results in [0,1).
}

inline float Halton_sampler::halton1607(const unsigned long long index) const
{
	return (m_perm1607[index % 1607ull] * 2582449ull +
		m_perm1607[(index / 1607ull) % 1607ull] * 1607ull +
		m_perm1607[(index / 2582449ull) % 1607ull]) * float(0x1.fffffcp-1 / 4149995543ull); // Results in [0,1).
}

inline float Halton_sampler::halton1609(const unsigned long long index) const
{
	return (m_perm1609[index % 1609ull] * 2588881ull +
		m_perm1609[(index / 1609ull) % 1609ull] * 1609ull +
		m_perm1609[(index / 2588881ull) % 1609ull]) * float(0x1.fffffcp-1 / 4165509529ull); // Results in [0,1).
}

inline float Halton_sampler::halton1613(const unsigned long long index) const
{
	return (m_perm1613[index % 1613ull] * 2601769ull +
		m_perm1613[(index / 1613ull) % 1613ull] * 1613ull +
		m_perm1613[(index / 2601769ull) % 1613ull]) * float(0x1.fffffcp-1 / 4196653397ull); // Results in [0,1).
}

inline float Halton_sampler::halton1619(const unsigned long long index) const
{
	return (m_perm1619[index % 1619ull] * 2621161ull +
		m_perm1619[(index / 1619ull) % 1619ull] * 1619ull +
		m_perm1619[(index / 2621161ull) % 1619ull]) * float(0x1.fffffcp-1 / 4243659659ull); // Results in [0,1).
}

#endif // HALTON_SAMPLER_H

